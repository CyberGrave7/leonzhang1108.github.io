{"version":3,"sources":["pages/MusicVisualization/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","Visualizer","_a","draw","size","volume","currentTime","_this","this","load","url","callback","progressCb","xhr","XMLHttpRequest","abort","open","responseType","onload","response","onprogress","v","loaded","total","send","play","src","cb","n","count","source","stop","decodeCallback","buffer","duration","ac","bufferSource","createBufferSource","loop","connect","analyser","start","visualize","e","console","log","ArrayBuffer","decodeAudioData","arrayBuffer","updateVolume","vol","gainNode","gain","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","curr","toFixed","pause","suspend","cancelAnimationFrame","resume","close","AudioContext","createGain","destination","createAnalyser","fftSize"],"mappings":"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","file":"static/js/18.ac8026ae.chunk.js","sourcesContent":["export default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  xhr\n  volume\n  duration\n  currentTime\n  curr\n  total\n\n  constructor({ draw, size, volume, currentTime }) {\n    this.source = null\n    this.count = 0\n    this.ac = new AudioContext()\n    this.draw = draw\n    this.size = size\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume = volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n    this.currentTime = currentTime\n  }\n\n  load = (url, callback, progressCb) => {\n    this.xhr = new XMLHttpRequest()\n    this.abort()\n    this.xhr.open('GET', url)\n    this.xhr.responseType = 'arraybuffer'\n    this.xhr.onload = () => {\n      callback(this.xhr.response)\n    }\n    this.xhr.onprogress = v => {\n      const { loaded, total } = v\n      progressCb(loaded / total * 100)\n    }\n    this.xhr.send()\n  }\n\n  abort = () => this.xhr && this.xhr.abort()\n\n  play = ({src, cb, progressCb}) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      this.duration = buffer.duration\n      if (n === this.count && this.ac) { \n        try {\n          const bufferSource = this.ac.createBufferSource()\n          bufferSource.buffer = buffer\n          bufferSource.loop = true\n          bufferSource.connect(this.analyser)\n          bufferSource.start()\n          this.source = bufferSource\n          this.visualize()\n          cb()\n        } catch(e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      }, progressCb)\n    }\n  }\n\n  updateVolume = vol => {\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n      const curr = this.ac.currentTime.toFixed(0)\n      const total = this.duration.toFixed(0)\n      if (!this.curr || this.curr !== curr) {\n        this.curr = curr\n        this.currentTime({ curr, total })\n      }\n    }\n    fn()\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualization/visualizer.ts"],"sourceRoot":""}