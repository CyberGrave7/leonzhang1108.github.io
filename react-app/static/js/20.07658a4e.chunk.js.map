{"version":3,"sources":["pages/Tetris/constant.tsx","pages/Tetris/tools.tsx"],"names":["Object","defineProperty","__webpack_exports__","value","keyCode","left","up","right","down","space","block","L","J","O","T","Z","S","I","scores","blockMap","__WEBPACK_IMPORTED_MODULE_1__constant__","couldMoveLeftOrRight","_a","width","rx","y","playboard","length","blockList","couldMove","forEach","row","dy","every","item","dx","push","x","ox","oy","nx","ny","couldMoveFun","_","bottomBlockList","i","l","next","b","getCurrPosition","cBlock","screen","rotate","moveTo","__WEBPACK_IMPORTED_MODULE_0__utils__","clone","max","center","Math","floor","index","cm","curr"],"mappings":"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","file":"static/js/20.07658a4e.chunk.js","sourcesContent":["export default {\n  keyCode: {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    space: 32\n  },\n  block: {\n    L: [\n      [\n        [0, 0, 1],\n        [1, 1, 1]\n      ], [\n        [1, 1],\n        [0, 1],\n        [0, 1]\n      ], [\n        [1, 1, 1],\n        [1, 0, 0]\n      ], [\n        [1, 0],\n        [1, 0],\n        [1, 1]\n      ]\n    ],\n    J: [\n      [\n        [1, 0, 0],\n        [1, 1, 1]\n      ], [\n        [1, 1],\n        [1, 0],\n        [1, 0]\n      ], [\n        [1, 1, 1],\n        [0, 0, 1]\n      ], [\n        [0, 1],\n        [0, 1],\n        [1, 1]\n      ]\n    ],\n    O: [\n      [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ]\n    ],\n    T: [\n      [\n        [0, 1, 0],\n        [1, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [0, 1]\n      ], [\n        [1, 1, 1],\n        [0, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    Z: [\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ], [\n        [1, 1, 0],\n        [0, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    S: [\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ], [\n        [0, 1, 1],\n        [1, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ]\n    ],\n    I: [\n      [\n        [1, 1, 1, 1]\n      ], [\n        [1], [1], [1], [1]\n      ], [\n        [1, 1, 1, 1]\n      ], [\n        [1], [1], [1], [1]\n      ]\n    ]\n  },\n  scores: [1, 3, 5, 10]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Tetris/constant.tsx","import Utils from '@utils'\nimport Constant from './constant'\nconst { block: blockMap, keyCode } = Constant\n\nconst couldMoveLeftOrRight = ({ width, block, rx, y, playboard, length }) => {\n  const blockList: any[] = []\n  let couldMove = true\n  block.forEach((row, dy) => {\n    row.every((item, dx) => {\n      if (item) {\n        blockList.push({ x: dx, y: dy })\n      }\n      return true\n    })\n  })\n  blockList.every(item => {\n    const { x: ox, y: oy } = item\n    const nx = ox + rx\n    const ny = y + oy - length\n    if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n      couldMove = false\n    }\n    return couldMove\n  })\n  return couldMove\n}\n\nconst couldMoveFun = {\n  [keyCode.up]: ({ width, block, rx, y, playboard, length }) => {\n    let couldMove = true\n    block.every((row, dy) => {\n      row.every((_, dx) => {\n        const nx = dx + rx\n        const ny = y + dy - length\n        if (ny >= 0 && ny < 20 && playboard[ny][nx]) { couldMove = false }\n        return couldMove\n      })\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.down]: ({ width, block, rx, y, playboard, length }) => {\n    if (y === 21) { return false }\n    let couldMove = true\n    const bottomBlockList: any[] = []\n    for (let i = 0; i < width; i++) {\n      let l = block.length - 1\n      let next = true\n      while (l >= 0 && next) {\n        if (block[l][i]) {\n          bottomBlockList.push({ x: i, y: l })\n          next = false\n        }\n        l--\n      }\n    }\n    bottomBlockList.every(b => {\n      const { x: ox, y: oy } = b\n      const nx = ox + rx\n      const ny = y + oy - length\n      if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n        couldMove = false\n      }\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.left]: couldMoveLeftOrRight,\n  [keyCode.right]: couldMoveLeftOrRight\n}\n\nexport default {\n  getCurrPosition: ({ x, y, cBlock, screen, rotate, moveTo }) => {\n    const playboard = Utils.clone(screen)\n    const block: number[][] = blockMap[cBlock][rotate]\n    const width = block[0].length\n    const min = 0\n    const max = 10 - width\n    const center = Math.floor((10 - width) / 2)\n    let length = block.length\n    let index = y\n    let rx = center + x\n    if (rx < min) {\n      rx = min\n      x = -center\n    }\n    if (rx > max) {\n      rx = max\n      x = width % 2 === 1 ? center + 1 : center\n    }\n    const cm = couldMoveFun[moveTo]({ width, block, rx, y, playboard, length })\n\n    if (cm) {\n      while (index > 0 && length > 0) {\n        let curr = --index\n        const row = block[length - 1]\n        curr = curr > 20 ? 20 : curr\n        for (let i = 0; i < 10; i++) {\n          if (i < row.length) {\n            const b = playboard[curr][rx + i]\n            if (!b) {\n              playboard[curr][rx + i] = row[i]\n            }\n          }\n        }\n        length--\n      }\n    }\n\n    return { playboard, x, screen, couldMove: cm }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Tetris/tools.tsx"],"sourceRoot":""}