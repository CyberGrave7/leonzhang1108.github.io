{"version":3,"sources":["pages/MusicVisualizer/visualizer.ts"],"names":["Visualizer","_a","draw","size","volume","currentTime","_this","this","initAC","ac","AudioContext","gainNode","createGain","gain","value","connect","destination","analyser","createAnalyser","fftSize","load","url","callback","progressCb","abort","__WEBPACK_IMPORTED_MODULE_0_axios___default","responseType","onDownloadProgress","v","loaded","total","cancelToken","a","CancelToken","c","axiosCancellation","then","response","data","catch","thrown","isCancel","console","log","message","play","src","cb","n","count","source","stop","decodeCallback","buffer","createBufferSource","e","ArrayBuffer","decodeAudioData","arrayBuffer","_b","start","bufferSource","loop","visualize","updateVolume","vol","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","setCurrent","curr","setInterval","isFirst","interval","clearInterval","setCurrTime","duration","toFixed","pause","suspend","cancelAnimationFrame","resume","close"],"mappings":"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","file":"static/js/25.90a348df.chunk.js","sourcesContent":["import Axios from 'axios'\n\nexport default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  volume\n  buffer\n  currentTime\n  curr\n  total\n  interval\n  axiosModel\n  axiosCancellation\n\n  constructor ({ draw, size, volume, currentTime }) {\n    this.source = null\n    this.count = 0\n    this.draw = draw\n    this.size = size\n    this.volume = volume\n    this.currentTime = currentTime\n    this.initAC()\n  }\n\n  initAC = () => {\n    this.ac = new AudioContext()\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback, progressCb) => {\n    this.abort()\n    Axios({\n      url,\n      responseType: 'arraybuffer',\n      onDownloadProgress: v => {\n        const { loaded, total } = v\n        progressCb(loaded / total * 100)\n      },\n      cancelToken: new Axios.CancelToken(c => {\n        this.axiosCancellation = c\n      })\n    }).then(response => {\n      callback(response.data)\n    }).catch(thrown => {\n      if (Axios.isCancel(thrown)) {\n        console.log('Request canceled', thrown.message)\n      } else {\n        progressCb('error')\n      }\n    })\n  }\n\n  abort = () => this.axiosCancellation && this.axiosCancellation('abort')\n\n  play = ({ src, cb, progressCb }) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      this.buffer = buffer\n      if (n === this.count && this.ac) {\n        try {\n          this.createBufferSource({ buffer }, cb)\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      }, progressCb)\n    }\n  }\n\n  createBufferSource = ({ buffer, start = 0 }, cb?) => {\n    if (this.source) { this.source.stop() }\n    if (!this.buffer) { return }\n    const bufferSource = this.ac.createBufferSource()\n    bufferSource.buffer = this.buffer = buffer\n    bufferSource.loop = true\n    bufferSource.connect(this.analyser)\n    bufferSource.start(0, start)\n    this.source = bufferSource\n    this.visualize()\n    if (cb) { cb() }\n  }\n\n  updateVolume = vol => {\n    console.log(vol)\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n    }\n    fn()\n  }\n\n  setCurrent = (start = 0) => {\n    const { buffer } = this\n    this.curr = 0\n    this.createBufferSource({ buffer, start })\n    this.setInterval(true)\n  }\n\n  setInterval = (isFirst?) => {\n    if (this.interval) { clearInterval(this.interval) }\n    if (isFirst) { this.setCurrTime(isFirst) }\n    this.interval = setInterval(() => {\n      this.setCurrTime()\n    }, 1000)\n  }\n\n  setCurrTime = (isFirst?) => {\n    const total = this.buffer ? this.buffer.duration.toFixed(0) : 0\n    this.currentTime({ curr: isFirst ? 0 : ++this.curr , total })\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n    if (this.interval) { clearInterval(this.interval) }\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n    this.setInterval()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualizer/visualizer.ts"],"sourceRoot":""}