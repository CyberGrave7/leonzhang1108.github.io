{"version":3,"sources":["pages/MusicVisualization/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","Visualizer","_a","draw","size","volume","_this","this","load","url","callback","progressCb","xhr","XMLHttpRequest","abort","open","responseType","onload","response","onprogress","v","loaded","total","send","play","src","cb","n","count","source","stop","decodeCallback","buffer","ac","bufferSource","createBufferSource","loop","connect","analyser","start","visualize","e","console","log","ArrayBuffer","decodeAudioData","arrayBuffer","updateVolume","vol","gainNode","gain","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","pause","suspend","cancelAnimationFrame","resume","close","AudioContext","createGain","destination","createAnalyser","fftSize"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,QAAAC,EAAA,WAwGA,OA5FE,SAAYC,OAAEC,EAAAD,EAAAC,KAAMC,EAAAF,EAAAE,KAAMC,EAAAH,EAAAG,OAA1BC,EAAAC,KAeAA,KAAAC,KAAO,SAACC,EAAKC,EAAUC,GACrBL,EAAKM,IAAM,IAAIC,eACfP,EAAKQ,QACLR,EAAKM,IAAIG,KAAK,MAAON,GACrBH,EAAKM,IAAII,aAAe,cACxBV,EAAKM,IAAIK,OAAS,WAChBP,EAASJ,EAAKM,IAAIM,WAEpBZ,EAAKM,IAAIO,WAAa,SAAAC,GACZ,IAAAC,EAAAD,EAAAC,OAAQC,EAAAF,EAAAE,MAChBX,EAAWU,EAASC,EAAQ,MAE9BhB,EAAKM,IAAIW,QAGXhB,KAAAO,MAAQ,WAAM,OAAAR,EAAKM,KAAON,EAAKM,IAAIE,SAEnCP,KAAAiB,KAAO,SAACtB,OAACuB,EAAAvB,EAAAuB,IAAKC,EAAAxB,EAAAwB,GAAIf,EAAAT,EAAAS,WACVgB,IAAMrB,EAAKsB,MACbtB,EAAKuB,QACPvB,EAAKuB,OAAOC,OAEd,IAAMC,EAAiB,SAAAC,GACrB,GAAIL,IAAMrB,EAAKsB,OAAStB,EAAK2B,GAC3B,IACE,IAAMC,EAAe5B,EAAK2B,GAAGE,qBAC7BD,EAAaF,OAASA,EACtBE,EAAaE,MAAO,EACpBF,EAAaG,QAAQ/B,EAAKgC,UAC1BJ,EAAaK,MAAM,GACnBjC,EAAKuB,OAASK,EACd5B,EAAKkC,YACLd,IACA,MAAMe,GACNC,QAAQC,IAAIF,KAIdhB,aAAemB,YACjBtC,EAAK2B,GAAGY,gBAAgBpB,EAAKM,GAE7BzB,EAAKE,KAAKiB,EAAK,SAAAqB,GACbxC,EAAK2B,GAAGY,gBAAgBC,EAAaf,IACpCpB,IAIPJ,KAAAwC,aAAe,SAAAC,GACb1C,EAAK2C,SAASC,KAAKlD,MAAQM,EAAKD,OAAS2C,GAG3CzC,KAAAiC,UAAY,WACV,IAAMW,EAAM,IAAIC,WAAW9C,EAAKgC,SAASe,mBACnCC,EAAMC,OAAOC,sBACbC,EAAK,WACTnD,EAAKgC,SAASoB,qBAAqBP,GACnC7C,EAAKH,KAAKgD,EAAK7C,EAAKD,QACpBC,EAAKqD,MAAQL,EAAIG,IAEnBA,KAGFlD,KAAAqD,MAAQ,WACNtD,EAAK2B,GAAG4B,UACRN,OAAOO,qBAAqBxD,EAAKqD,QAGnCpD,KAAAwD,OAAS,WACPzD,EAAK2B,GAAG8B,SACRzD,EAAKkC,aAGPjC,KAAAuB,KAAO,WACLxB,EAAKQ,QACLR,EAAK2B,GAAG+B,QACRT,OAAOO,qBAAqBxD,EAAKqD,QAzFjCpD,KAAKsB,OAAS,KACdtB,KAAKqB,MAAQ,EACbrB,KAAK0B,GAAK,IAAIgC,aACd1D,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EAEZG,KAAK0C,SAAW1C,KAAK0B,GAAGiC,aACxB3D,KAAK0C,SAASC,KAAKlD,MAAQO,KAAKF,OAASA,EACzCE,KAAK0C,SAASZ,QAAQ9B,KAAK0B,GAAGkC,aAC9B5D,KAAK+B,SAAW/B,KAAK0B,GAAGmC,iBACxB7D,KAAK+B,SAAS+B,QAAsB,EAAZ9D,KAAKH,KAC7BG,KAAK+B,SAASD,QAAQ9B,KAAK0C,WAxB/B","file":"static/js/18.23c44ade.chunk.js","sourcesContent":["export default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  xhr\n  volume\n\n  constructor({ draw, size, volume }) {\n    this.source = null\n    this.count = 0\n    this.ac = new AudioContext()\n    this.draw = draw\n    this.size = size\n\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume = volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback, progressCb) => {\n    this.xhr = new XMLHttpRequest()\n    this.abort()\n    this.xhr.open('GET', url)\n    this.xhr.responseType = 'arraybuffer'\n    this.xhr.onload = () => {\n      callback(this.xhr.response)\n    }\n    this.xhr.onprogress = v => {\n      const { loaded, total } = v\n      progressCb(loaded / total * 100)\n    }\n    this.xhr.send()\n  }\n\n  abort = () => this.xhr && this.xhr.abort()\n\n  play = ({src, cb, progressCb}) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      if (n === this.count && this.ac) { \n        try {\n          const bufferSource = this.ac.createBufferSource()\n          bufferSource.buffer = buffer\n          bufferSource.loop = true\n          bufferSource.connect(this.analyser)\n          bufferSource.start(0)\n          this.source = bufferSource\n          this.visualize()\n          cb()\n        } catch(e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      }, progressCb)\n    }\n  }\n\n  updateVolume = vol => {\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n    }\n    fn()\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualization/visualizer.ts"],"sourceRoot":""}