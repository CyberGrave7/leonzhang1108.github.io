{"version":3,"sources":["pages/MusicVisualization/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","Visualizer","_a","draw","size","volume","_this","this","load","url","callback","xhr","XMLHttpRequest","abort","open","responseType","onload","response","send","play","src","cb","n","count","source","stop","decodeCallback","buffer","ac","bufferSource","createBufferSource","loop","connect","analyser","start","visualize","e","console","log","ArrayBuffer","decodeAudioData","arrayBuffer","updateVolume","vol","gainNode","gain","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","pause","suspend","cancelAnimationFrame","resume","close","AudioContext","createGain","destination","createAnalyser","fftSize"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,QAAAC,EAAA,WAoGA,OAxFE,SAAYC,OAAEC,EAAAD,EAAAC,KAAMC,EAAAF,EAAAE,KAAMC,EAAAH,EAAAG,OAA1BC,EAAAC,KAeAA,KAAAC,KAAO,SAACC,EAAKC,GACXJ,EAAKK,IAAM,IAAIC,eACfN,EAAKO,QACLP,EAAKK,IAAIG,KAAK,MAAOL,GACrBH,EAAKK,IAAII,aAAe,cACxBT,EAAKK,IAAIK,OAAS,WAChBN,EAASJ,EAAKK,IAAIM,WAEpBX,EAAKK,IAAIO,QAGXX,KAAAM,MAAQ,WAAM,OAAAP,EAAKK,KAAOL,EAAKK,IAAIE,SAEnCN,KAAAY,KAAO,SAACC,EAAKC,GACX,IAAMC,IAAMhB,EAAKiB,MACbjB,EAAKkB,QACPlB,EAAKkB,OAAOC,OAEd,IAAMC,EAAiB,SAAAC,GACrB,GAAIL,IAAMhB,EAAKiB,OAASjB,EAAKsB,GAC3B,IACE,IAAMC,EAAevB,EAAKsB,GAAGE,qBAC7BD,EAAaF,OAASA,EACtBE,EAAaE,MAAO,EACpBF,EAAaG,QAAQ1B,EAAK2B,UAC1BJ,EAAaK,MAAM,GACnB5B,EAAKkB,OAASK,EACdvB,EAAK6B,YACLd,IACA,MAAMe,GACNC,QAAQC,IAAIF,KAIdhB,aAAemB,YACjBjC,EAAKsB,GAAGY,gBAAgBpB,EAAKM,GAE7BpB,EAAKE,KAAKY,EAAK,SAAAqB,GACbnC,EAAKsB,GAAGY,gBAAgBC,EAAaf,MAK3CnB,KAAAmC,aAAe,SAAAC,GACbrC,EAAKsC,SAASC,KAAK7C,MAAQM,EAAKD,OAASsC,GAG3CpC,KAAA4B,UAAY,WACV,IAAMW,EAAM,IAAIC,WAAWzC,EAAK2B,SAASe,mBACnCC,EAAMC,OAAOC,sBACbC,EAAK,WACT9C,EAAK2B,SAASoB,qBAAqBP,GACnCxC,EAAKH,KAAK2C,EAAKxC,EAAKD,QACpBC,EAAKgD,MAAQL,EAAIG,IAEnBA,KAGF7C,KAAAgD,MAAQ,WACNjD,EAAKsB,GAAG4B,UACRN,OAAOO,qBAAqBnD,EAAKgD,QAGnC/C,KAAAmD,OAAS,WACPpD,EAAKsB,GAAG8B,SACRpD,EAAK6B,aAGP5B,KAAAkB,KAAO,WACLnB,EAAKO,QACLP,EAAKsB,GAAG+B,QACRT,OAAOO,qBAAqBnD,EAAKgD,QArFjC/C,KAAKiB,OAAS,KACdjB,KAAKgB,MAAQ,EACbhB,KAAKqB,GAAK,IAAIgC,aACdrD,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EAEZG,KAAKqC,SAAWrC,KAAKqB,GAAGiC,aACxBtD,KAAKqC,SAASC,KAAK7C,MAAQO,KAAKF,OAASA,EACzCE,KAAKqC,SAASZ,QAAQzB,KAAKqB,GAAGkC,aAC9BvD,KAAK0B,SAAW1B,KAAKqB,GAAGmC,iBACxBxD,KAAK0B,SAAS+B,QAAsB,EAAZzD,KAAKH,KAC7BG,KAAK0B,SAASD,QAAQzB,KAAKqC,WAxB/B","file":"static/js/18.715a6193.chunk.js","sourcesContent":["export default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  xhr\n  volume\n\n  constructor({ draw, size, volume }) {\n    this.source = null\n    this.count = 0\n    this.ac = new AudioContext()\n    this.draw = draw\n    this.size = size\n\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume = volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback) => {\n    this.xhr = new XMLHttpRequest()\n    this.abort()\n    this.xhr.open('GET', url)\n    this.xhr.responseType = 'arraybuffer'\n    this.xhr.onload = () => {\n      callback(this.xhr.response)\n    }\n    this.xhr.send()\n  }\n\n  abort = () => this.xhr && this.xhr.abort()\n\n  play = (src, cb?) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      if (n === this.count && this.ac) { \n        try {\n          const bufferSource = this.ac.createBufferSource()\n          bufferSource.buffer = buffer\n          bufferSource.loop = true\n          bufferSource.connect(this.analyser)\n          bufferSource.start(0)\n          this.source = bufferSource\n          this.visualize()\n          cb()\n        } catch(e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      })\n    }\n  }\n\n  updateVolume = vol => {\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n    }\n    fn()\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualization/visualizer.ts"],"sourceRoot":""}