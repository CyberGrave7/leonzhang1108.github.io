{"version":3,"sources":["pages/Reversi/tools.tsx"],"names":["Object","defineProperty","__webpack_exports__","value","directionMap","statusMap","check","_a","x","y","checkerboard","player","direction","dx","dy","result","click","couldClick","couldRight","couldLeft","couldTop","couldBottom","couldTopLeft","couldTopRight","couldBottomLeft","couldBottomRight","clickToCover","forEach","cx","cy"],"mappings":"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","file":"static/js/12.bb32eb08.chunk.js","sourcesContent":["const directionMap = [\n  [0, 1], [0, -1],\n  [-1, 0], [1, 0],\n  [-1, -1], [-1, 1],\n  [1, -1], [1, 1]\n]\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2\n}\n\nconst borderMax = 7\n\nconst check = ({ x, y, checkerboard, player, direction }) => {\n  const [ dx, dy ] = direction\n  let result = 0\n  let click = player ? statusMap.black : statusMap.white\n  x += dx\n  y += dy\n  while (x >= 0 && x <= borderMax && y >= 0 && y <= borderMax) {\n    if (checkerboard[x][y] === statusMap.empty || result === 2) {\n      break\n    }\n    if (checkerboard[x][y] === click) {\n      result++\n      click = !player ? statusMap.black : statusMap.white\n    } else {\n      if (result !== 1) { break }\n    }\n    x += dx\n    y += dy\n  }\n  return result === 2\n}\n\nconst couldRight = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[0] })\n\nconst couldLeft = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[1] })\n\nconst couldTop = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[2] })\n\nconst couldBottom = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[3] })\n\nconst couldTopLeft = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[4] })\n\nconst couldTopRight = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[5] })\n\nconst couldBottomLeft = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[6] })\n\nconst couldBottomRight = ({ x, y, checkerboard, player }) => \n  check({ x, y, checkerboard, player, direction: directionMap[7] })\n\n\nexport default {\n  couldClick: ({ x, y, checkerboard, player }) => \n    couldRight({ x, y, checkerboard, player })\n    || couldLeft({ x, y, checkerboard, player })\n    || couldTop({ x, y, checkerboard, player })\n    || couldBottom({ x, y, checkerboard, player })\n    || couldTopLeft({ x, y, checkerboard, player })\n    || couldTopRight({ x, y, checkerboard, player })\n    || couldBottomLeft({ x, y, checkerboard, player })\n    || couldBottomRight({ x, y, checkerboard, player }),\n\n  clickToCover: ({ x, y, checkerboard, player }) => {\n    directionMap.forEach(direction => {\n      const [dx, dy] = direction\n      let cx = x \n      let cy = y\n      cx += dx\n      cy += dy\n\n      if (check({ x, y, checkerboard, player, direction })) {\n        while (cx >= 0 && cx <= borderMax && cy >= 0 && cy <= borderMax) {\n          if (checkerboard[cx][cy] === statusMap.empty \n            || checkerboard[cx][cy] === (player ? statusMap.white : statusMap.black)) {\n            break\n          }\n          checkerboard[cx][cy] = player ? statusMap.white : statusMap.black\n          cx += dx\n          cy += dy\n        }\n      }\n    })\n    return checkerboard\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Reversi/tools.tsx"],"sourceRoot":""}