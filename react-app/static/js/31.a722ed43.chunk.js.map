{"version":3,"sources":["pages/MusicVisualizer/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","__WEBPACK_IMPORTED_MODULE_0_axios__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_0_axios___default","n","Visualizer","_a","_this","this","draw","size","volume","currentTime","initAC","ac","AudioContext","gainNode","createGain","gain","connect","destination","analyser","createAnalyser","fftSize","load","url","callback","progressCb","abort","responseType","onDownloadProgress","v","loaded","total","cancelToken","a","CancelToken","c","axiosCancellation","then","response","data","catch","thrown","isCancel","console","log","message","play","src","cb","count","source","stop","decodeCallback","buffer","createBufferSource","e","ArrayBuffer","decodeAudioData","arrayBuffer","_b","start","bufferSource","loop","visualize","updateVolume","vol","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","setCurrent","curr","setInterval","isFirst","interval","clearInterval","setCurrTime","duration","toFixed","pause","suspend","cancelAnimationFrame","resume","close"],"mappings":"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","file":"static/js/31.a722ed43.chunk.js","sourcesContent":["import Axios from 'axios'\n\nexport default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  volume\n  buffer\n  currentTime\n  curr\n  total\n  interval\n  axiosModel\n  axiosCancellation\n\n  constructor ({ draw, size, volume, currentTime }) {\n    this.source = null\n    this.count = 0\n    this.draw = draw\n    this.size = size\n    this.volume = volume\n    this.currentTime = currentTime\n    this.initAC()\n  }\n\n  initAC = () => {\n    this.ac = new AudioContext()\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback, progressCb) => {\n    this.abort()\n    Axios({\n      url,\n      responseType: 'arraybuffer',\n      onDownloadProgress: v => {\n        const { loaded, total } = v\n        progressCb(loaded / total * 100)\n      },\n      cancelToken: new Axios.CancelToken(c => {\n        this.axiosCancellation = c\n      })\n    }).then(response => {\n      callback(response.data)\n    }).catch(thrown => {\n      if (Axios.isCancel(thrown)) {\n        console.log('Request canceled', thrown.message)\n      } else {\n        progressCb('error')\n      }\n    })\n  }\n\n  abort = () => this.axiosCancellation && this.axiosCancellation('abort')\n\n  play = ({ src, cb, progressCb }) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      this.buffer = buffer\n      if (n === this.count && this.ac) {\n        try {\n          this.createBufferSource({ buffer }, cb)\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      }, progressCb)\n    }\n  }\n\n  createBufferSource = ({ buffer, start = 0 }, cb?) => {\n    if (this.source) { this.source.stop() }\n    if (!this.buffer) { return }\n    const bufferSource = this.ac.createBufferSource()\n    bufferSource.buffer = this.buffer = buffer\n    bufferSource.loop = true\n    bufferSource.connect(this.analyser)\n    bufferSource.start(0, start)\n    this.source = bufferSource\n    this.visualize()\n    if (cb) { cb() }\n  }\n\n  updateVolume = vol => {\n    console.log(vol)\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n    }\n    fn()\n  }\n\n  setCurrent = (start = 0) => {\n    const { buffer } = this\n    this.curr = 0\n    this.createBufferSource({ buffer, start })\n    this.setInterval(true)\n  }\n\n  setInterval = (isFirst?) => {\n    if (this.interval) { clearInterval(this.interval) }\n    if (isFirst) { this.setCurrTime(isFirst) }\n    this.interval = setInterval(() => {\n      this.setCurrTime()\n    }, 1000)\n  }\n\n  setCurrTime = (isFirst?) => {\n    const total = this.buffer ? this.buffer.duration.toFixed(0) : 0\n    this.currentTime({ curr: isFirst ? 0 : ++this.curr , total })\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n    if (this.interval) { clearInterval(this.interval) }\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n    this.setInterval()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualizer/visualizer.ts"],"sourceRoot":""}