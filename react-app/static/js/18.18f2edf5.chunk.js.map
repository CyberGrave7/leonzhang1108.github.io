{"version":3,"sources":["pages/MusicVisualization/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","Visualizer","_a","draw","size","volume","_this","this","load","url","callback","xhr","XMLHttpRequest","abort","open","responseType","onload","response","send","play","src","n","count","source","stop","decodeCallback","buffer","bufferSource","ac","createBufferSource","loop","connect","analyser","start","visualize","ArrayBuffer","decodeAudioData","arrayBuffer","updateVolume","vol","gainNode","gain","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","fn","getByteFrequencyData","rafId","pause","suspend","cancelAnimationFrame","resume","close","AudioContext","createGain","destination","createAnalyser","fftSize"],"mappings":"oDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,QAAAC,EAAA,WAyFA,OA/EE,SAAYC,OAAEC,EAAAD,EAAAC,KAAMC,EAAAF,EAAAE,KAAMC,EAAAH,EAAAG,OAA1BC,EAAAC,KAeAA,KAAAC,KAAO,SAACC,EAAKC,GACX,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,QACJF,EAAIG,KAAK,MAAOL,GAChBE,EAAII,aAAe,cACnBJ,EAAIK,OAAS,WACXN,EAASC,EAAIM,WAEfN,EAAIO,QAGNX,KAAAY,KAAO,SAAAC,GACL,IAAMC,IAAMf,EAAKgB,MACbhB,EAAKiB,QACPjB,EAAKiB,OAAOC,OAEd,IAAMC,EAAiB,SAAAC,GACrB,GAAIL,IAAMf,EAAKgB,MAAf,CACA,IAAMK,EAAerB,EAAKsB,GAAGC,qBAC7BF,EAAaD,OAASA,EACtBC,EAAaG,MAAO,EACpBH,EAAaI,QAAQzB,EAAK0B,UAC1BL,EAAaM,MAAM,GACnB3B,EAAKiB,OAASI,EACdrB,EAAK4B,cAEHd,aAAee,YACjB7B,EAAKsB,GAAGQ,gBAAgBhB,EAAKK,GAE7BnB,EAAKE,KAAKY,EAAK,SAAAiB,GACb/B,EAAKsB,GAAGQ,gBAAgBC,EAAaZ,MAK3ClB,KAAA+B,aAAe,SAAAC,GACbjC,EAAKkC,SAASC,KAAKzC,MAAQuC,GAG7BhC,KAAA2B,UAAY,WACV,IAAMQ,EAAM,IAAIC,WAAWrC,EAAK0B,SAASY,mBACnCC,EAAMC,OAAOC,sBACbC,EAAK,WACT1C,EAAK0B,SAASiB,qBAAqBP,GACnCpC,EAAKH,KAAKuC,GACVpC,EAAK4C,MAAQL,EAAIG,IAEnBA,KAGFzC,KAAA4C,MAAQ,WACN7C,EAAKsB,GAAGwB,UACRN,OAAOO,qBAAqB/C,EAAK4C,QAGnC3C,KAAA+C,OAAS,WACPhD,EAAKsB,GAAG0B,SACRhD,EAAK4B,aAGP3B,KAAAiB,KAAO,WACLlB,EAAKsB,GAAG2B,QACRT,OAAOO,qBAAqB/C,EAAK4C,QA5EjC3C,KAAKgB,OAAS,KACdhB,KAAKe,MAAQ,EACbf,KAAKqB,GAAK,IAAI4B,aACdjD,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EAEZG,KAAKiC,SAAWjC,KAAKqB,GAAG6B,aACxBlD,KAAKiC,SAASC,KAAKzC,MAAQK,EAC3BE,KAAKiC,SAAST,QAAQxB,KAAKqB,GAAG8B,aAC9BnD,KAAKyB,SAAWzB,KAAKqB,GAAG+B,iBACxBpD,KAAKyB,SAAS4B,QAAsB,EAAZrD,KAAKH,KAC7BG,KAAKyB,SAASD,QAAQxB,KAAKiC,WAtB/B","file":"static/js/18.18f2edf5.chunk.js","sourcesContent":["export default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n\n  constructor({ draw, size, volume }) {\n    this.source = null\n    this.count = 0\n    this.ac = new AudioContext()\n    this.draw = draw\n    this.size = size\n\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback) => {\n    const xhr = new XMLHttpRequest()\n    xhr.abort()\n    xhr.open('GET', url)\n    xhr.responseType = 'arraybuffer'\n    xhr.onload = () => {\n      callback(xhr.response)\n    }\n    xhr.send()\n  }\n\n  play = src => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      if (n !== this.count) { return }\n      const bufferSource = this.ac.createBufferSource()\n      bufferSource.buffer = buffer\n      bufferSource.loop = true\n      bufferSource.connect(this.analyser)\n      bufferSource.start(0)\n      this.source = bufferSource\n      this.visualize()\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      })\n    }\n  }\n\n  updateVolume = vol => {\n    this.gainNode.gain.value = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr)\n      this.rafId = raf(fn)\n    }\n    fn()\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n  }\n\n  stop = () => {\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualization/visualizer.ts"],"sourceRoot":""}