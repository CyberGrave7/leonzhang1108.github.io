{"version":3,"sources":["pages/MusicVisualization/visualizer.ts"],"names":["Object","defineProperty","__webpack_exports__","value","Visualizer","_a","draw","size","volume","currentTime","_this","this","initAC","ac","AudioContext","gainNode","createGain","gain","connect","destination","analyser","createAnalyser","fftSize","load","url","callback","progressCb","xhr","XMLHttpRequest","abort","open","responseType","onload","response","onprogress","v","loaded","total","send","play","src","cb","n","count","source","stop","decodeCallback","buffer","createBufferSource","e","console","log","ArrayBuffer","decodeAudioData","arrayBuffer","_b","start","bufferSource","loop","visualize","updateVolume","vol","arr","Uint8Array","frequencyBinCount","raf","window","requestAnimationFrame","duration","fn","getByteFrequencyData","rafId","curr","toFixed","setCurrent","pause","suspend","cancelAnimationFrame","resume","close"],"mappings":"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","file":"static/js/18.55159e3e.chunk.js","sourcesContent":["export default class Visualizer {\n  source\n  count\n  ac\n  draw\n  size\n  gainNode\n  analyser\n  rafId\n  xhr\n  volume\n  buffer\n  currentTime\n  curr\n  total\n\n  constructor({ draw, size, volume, currentTime }) {\n    this.source = null\n    this.count = 0\n    this.draw = draw\n    this.size = size\n    this.volume = volume\n    this.currentTime = currentTime\n    this.initAC()\n   \n  }\n\n  initAC = () => {\n    this.ac = new AudioContext()\n    this.gainNode = this.ac.createGain()\n    this.gainNode.gain.value = this.volume\n    this.gainNode.connect(this.ac.destination)\n    this.analyser = this.ac.createAnalyser()\n    this.analyser.fftSize = this.size * 2\n    this.analyser.connect(this.gainNode)\n  }\n\n  load = (url, callback, progressCb) => {\n    this.xhr = new XMLHttpRequest()\n    this.abort()\n    this.xhr.open('GET', url)\n    this.xhr.responseType = 'arraybuffer'\n    this.xhr.onload = () => {\n      callback(this.xhr.response)\n    }\n    this.xhr.onprogress = v => {\n      const { loaded, total } = v\n      progressCb(loaded / total * 100)\n    }\n    this.xhr.send()\n  }\n\n  abort = () => this.xhr && this.xhr.abort()\n\n  play = ({ src, cb, progressCb }) => {\n    const n = ++this.count\n    if (this.source) {\n      this.source.stop()\n    }\n    const decodeCallback = buffer => {\n      this.buffer = buffer\n      if (n === this.count && this.ac) { \n        try {\n          this.createBufferSource({ buffer }, cb)\n        } catch(e) {\n          console.log(e)\n        }\n      }\n    }\n    if (src instanceof ArrayBuffer) {\n      this.ac.decodeAudioData(src, decodeCallback)\n    } else {\n      this.load(src, arrayBuffer => {\n        this.ac.decodeAudioData(arrayBuffer, decodeCallback)\n      }, progressCb)\n    }\n  }\n\n  createBufferSource = ({ buffer, start = 0 }, cb?) => {\n    if (this.source) { this.source.stop() }\n    if (!this.buffer) { return }\n    const bufferSource = this.ac.createBufferSource()\n    bufferSource.buffer = this.buffer = buffer\n    bufferSource.loop = true\n    bufferSource.connect(this.analyser)\n    bufferSource.start(0, start)\n    this.source = bufferSource\n    this.visualize()\n    if(cb) { cb() }\n  }\n\n  updateVolume = vol => {\n    this.gainNode.gain.value = this.volume = vol\n  }\n\n  visualize = () => {\n    const arr = new Uint8Array(this.analyser.frequencyBinCount)\n    const raf = window.requestAnimationFrame\n    const { duration } = this.buffer\n    const fn = () => {\n      this.analyser.getByteFrequencyData(arr)\n      this.draw(arr, this.volume)\n      this.rafId = raf(fn)\n      const curr = this.ac.currentTime.toFixed(0)\n      const total = duration.toFixed(0)\n      if (!this.curr || this.curr !== curr) {\n        this.curr = curr\n        this.currentTime({ curr, total })\n      }\n    }\n    fn()\n  }\n\n  setCurrent = start => {\n    const { buffer } = this\n    this.initAC()\n    this.createBufferSource({ buffer, start })\n  }\n\n  pause = () => {\n    this.ac.suspend()\n    window.cancelAnimationFrame(this.rafId)\n  }\n\n  resume = () => {\n    this.ac.resume()\n    this.visualize()\n  }\n\n  stop = () => {\n    this.abort()\n    this.ac.close()\n    window.cancelAnimationFrame(this.rafId)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/MusicVisualization/visualizer.ts"],"sourceRoot":""}