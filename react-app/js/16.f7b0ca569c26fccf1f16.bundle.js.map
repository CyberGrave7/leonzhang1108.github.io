{"version":3,"sources":["webpack:///./src/pages/Reversi/tools.tsx","webpack:///./src/pages/Reversi/index.tsx"],"names":["directionMap","statusMap","check","x","y","checkerboard","player","direction","dx","dy","result","click","couldClick","some","clickToCover","reverse","forEach","cx","cy","push","c","r","empty","black","white","blackHover","whiteHover","props","reset","e","state","history","step","size","setState","initCheckerboard","flatten","length","arr","reduce","a","b","concat","Array","isArray","itemMouseEnter","rowIndex","itemIndex","itemMouseLeave","itemClick","curr","pass","retract","renderItem","item","status","className","key","onClick","handle","onMouseOver","onMouseLeave","join","renderRow","row","map","getScore","isWin","content","title","info","render","isMobile","disablePass","Object","keys","this","type","disabled","Component","connect","component","Reversi","mapStateToProps","common"],"mappings":"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","file":"js/16.f7b0ca569c26fccf1f16.bundle.js","sourcesContent":["const directionMap = [\n  [0, 1], [0, -1],\n  [-1, 0], [1, 0],\n  [-1, -1], [-1, 1],\n  [1, -1], [1, 1]\n]\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2\n}\n\nconst borderMax = 7\n\ninterface IReverse {\n  x: number,\n  y: number\n}\n\nconst check = ({ x, y, checkerboard, player, direction }) => {\n  const [ dx, dy ] = direction\n  let result = 0\n  let click = player ? statusMap.black : statusMap.white\n  x += dx\n  y += dy\n  while (x >= 0 && x <= borderMax && y >= 0 && y <= borderMax) {\n    if (checkerboard[x][y] === statusMap.empty || result === 2) { break }\n    if (checkerboard[x][y] === click) {\n      result++\n      click = !player ? statusMap.black : statusMap.white\n    } else {\n      if (result !== 1) { break }\n    }\n    x += dx\n    y += dy\n  }\n  return result === 2\n}\n\nexport default {\n  couldClick: ({ x, y, checkerboard, player }) =>\n    directionMap.some(direction => check({ x, y, checkerboard, player, direction })),\n\n  clickToCover: ({ x, y, checkerboard, player }) => {\n    const reverse: IReverse[] = []\n    directionMap.forEach(direction => {\n      const [dx, dy] = direction\n      let cx = x\n      let cy = y\n      cx += dx\n      cy += dy\n      if (check({ x, y, checkerboard, player, direction })) {\n        while (cx >= 0 && cx <= borderMax && cy >= 0 && cy <= borderMax) {\n          if (checkerboard[cx][cy] === statusMap.empty\n            || checkerboard[cx][cy] === (player ? statusMap.white : statusMap.black)) {\n            break\n          }\n          checkerboard[cx][cy] = player ? statusMap.white : statusMap.black\n          reverse.push({ x: cx, y: cy })\n          cx += dx\n          cy += dy\n        }\n      }\n    })\n    return { c: checkerboard, r: reverse }\n  }\n}\n","import Utils from '@utils'\nimport { Button, Modal } from 'antd'\nimport React from 'react'\nimport './index.less'\nimport Tools from './tools'\n\ninterface IProps {\n  isMobile: boolean\n}\n\ninterface IState {\n  checkerboard: any[][],\n  step: number,\n  history: any[],\n  size: number\n}\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2,\n  blackHover: 3,\n  whiteHover: 4\n}\n\nclass Reversi extends React.Component<IProps, IState> {\n  constructor (props) {\n    super(props)\n    this.reset()\n  }\n\n  reset = (e?) => {\n    const { checkerboard, size } = this.initCheckerboard()\n    const state = {\n      checkerboard,\n      history: [],\n      step: 0,\n      size\n    }\n    if (e) {\n      this.setState(state)\n    } else {\n      this.state = { ...state }\n    }\n  }\n\n  initCheckerboard = () => {\n    const checkerboard = [\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 2, 1, 0, 0, 0],\n      [0, 0, 0, 1, 2, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n    return {\n      checkerboard,\n      size: this.flatten(checkerboard).length\n    }\n  }\n\n  flatten = arr => arr.reduce((a, b) => a.concat(Array.isArray(b) ? this.flatten(b) : b), [])\n\n  couldClick = ({ x, y }) => {\n    const { checkerboard, step } = this.state\n    return Tools.couldClick({ x, y, checkerboard, player: step % 2 })\n  }\n\n  itemMouseEnter = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step } = this.state\n    const { blackHover, whiteHover } = statusMap\n    if (checkerboard[x][y] === statusMap.empty && this.couldClick({ x, y })) {\n      checkerboard[x][y] = step % 2 === 0 ? blackHover : whiteHover\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemMouseLeave = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard } = this.state\n    if (checkerboard[x][y] === statusMap.blackHover\n      || checkerboard[x][y] === statusMap.whiteHover) {\n      checkerboard[x][y] = statusMap.empty\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemClick = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step, history } = this.state\n    const { black, white } = statusMap\n    if (checkerboard[x][y] !== black && checkerboard[x][y] !== white && this.couldClick({ x, y })) {\n      checkerboard[x][y] = step % 2 === 0 ? black : white\n      const { c, r } = Tools.clickToCover({ x, y, checkerboard, player: step % 2 })\n      history.push({ curr: { x, y }, reverse: r })\n      this.setState({\n        checkerboard: c,\n        step: history.length,\n        history\n      })\n    }\n  }\n\n  pass = () => {\n    const { history } = this.state\n    history.push({})\n    this.setState({\n      step: history.length,\n      history\n    })\n  }\n\n  retract = () => {\n    const { history, checkerboard } = this.state\n    const { curr, reverse } = history.pop()\n    if (curr) {\n      const { x, y } = curr\n      const { empty, black, white } = statusMap\n      checkerboard[x][y] = empty\n      reverse.forEach(r => {\n        checkerboard[r.x][r.y] = checkerboard[r.x][r.y] === white ? black : white\n      })\n    }\n\n    this.setState({ history, step: history.length, checkerboard })\n  }\n\n  renderItem = (item, rowIndex, itemIndex) => {\n    const status = this.state.checkerboard[rowIndex][itemIndex]\n    const { black, white, blackHover, whiteHover } = statusMap\n    const className = status ? ['chosen'] : []\n    if (className.length) {\n      switch (status) {\n        case black:\n          className.push('black selected')\n          break\n        case white:\n          className.push('white selected')\n          break\n        case blackHover:\n          className.push('black')\n          break\n        case whiteHover:\n          className.push('white')\n          break\n      }\n    }\n    return (\n      <td className='item' key={itemIndex}\n        onClick={Utils.handle(this.itemClick, { rowIndex, itemIndex })}\n        onMouseOver={Utils.handle(this.itemMouseEnter, { rowIndex, itemIndex })}\n        onMouseLeave={Utils.handle(this.itemMouseLeave, { rowIndex, itemIndex })}\n      >\n        <div className={className.join(' ')} >\n          <div className='chess front'/>\n          <div className='chess back'/>\n        </div>\n      </td>\n    )\n  }\n\n  renderRow = (row, rowIndex) => (\n    <tr className='row' key={rowIndex}>\n      {row.map((item, itemIndex) => this.renderItem(item, rowIndex, itemIndex))}\n    </tr>\n  )\n\n  getScore = () => {\n    const { checkerboard } = this.state\n    let black = 0\n    let white = 0\n    checkerboard.forEach(row => row.forEach(item => {\n      if (item === statusMap.black) { black++ }\n      if (item === statusMap.white) { white++ }\n    }))\n    return { black, white }\n  }\n\n  isWin = ({ black, white, size }) => {\n    let title = ''\n    let content\n    if (black + white === size) {\n      if (black > white) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (black < white) {\n        title = 'Victory'\n        content = 'white wins'\n      } else {\n        title = 'Peace'\n        content = 'Draw'\n      }\n    } else if (!black || !white) {\n      if (black) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (white) {\n        title = 'Victory'\n        content = 'white wins'\n      }\n    }\n\n    if (title && content) { Modal.info({ title, content }) }\n  }\n\n  render () {\n    const { checkerboard, history, step, size } = this.state\n    const { isMobile } = this.props\n    const { black, white } = this.getScore()\n    const disablePass = black + white === size || (history.length && Object.keys(history[history.length - 1]).length === 0)\n    this.isWin({ black, white, size })\n    return (\n      <div className='reversi-wrapper'>\n        <div className='reversi-top'>\n          <div className={`top black ${isMobile ? '' : 'bigger'} ${step % 2 === 1 ? '' : 'current'}`}>{black}</div>\n          <div className={`top white ${isMobile ? '' : 'bigger'} ${step % 2 === 1 ? 'current' : ''}`}>{white}</div>\n        </div>\n        <div className={ isMobile ? 'checkerboard' : 'checkerboard bigger' }>\n          <table>\n            <tbody>\n              {checkerboard.map(this.renderRow)}\n            </tbody>\n          </table>\n        </div>\n        <div className='reversi-bottom'>\n          <Button type='primary' disabled={history.length === 0} onClick={this.reset}>\n            Reset\n          </Button>\n          <Button type='primary' disabled={disablePass ? true : false} onClick={this.pass}>\n            Pass\n          </Button>\n          <Button type='primary' disabled={history.length === 0} onClick={this.retract}>\n            Retract\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Reversi,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile\n  })\n})\n"],"sourceRoot":""}