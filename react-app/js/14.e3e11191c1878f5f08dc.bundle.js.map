{"version":3,"sources":["webpack:///./src/constant/common.ts","webpack:///./src/pages/Snake/index.tsx"],"names":["__webpack_exports__","keyCode","left","up","right","down","Direction","_constant_common__WEBPACK_IMPORTED_MODULE_3__","Up","Down","Left","Right","reverseDirection","_a","initSnake","initSpeed","getFruit","snake","max","f","_utils__WEBPACK_IMPORTED_MODULE_1__","random","includes","Snake","_super","_this","apply","this","arguments","size","props","isMobile","rowCount","w","colCount","h","direction","friut","speed","count","state","isGameOver","hint","keydown","e","go","init","clearInterval","interval","doCycle","setInterval","reset","setState","clearReact","resetSnake","drawSnake","ctx","clearRect","last","length","next","getHead","shift","push","drawFriut","draw","v","forEach","i","c","fillStyle","fillRect","__extends","prototype","componentWillMount","document","addEventListener","componentWillUnmount","removeEventListener","componentDidMount","canvas","getContext","joystick","nipplejs__WEBPACK_IMPORTED_MODULE_6__","zone","remote","color","on","render","_b","react__WEBPACK_IMPORTED_MODULE_0__","className","ref","el","width","height","style","backgroundColor","antd_lib_button__WEBPACK_IMPORTED_MODULE_4___default","a","type","onClick","connect","component","mapStateToProps","common","contentWidth","contentHeight"],"mappings":"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","file":"js/14.e3e11191c1878f5f08dc.bundle.js","sourcesContent":["export default {\n  keyCode: {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40\n  }\n}\n","import * as React from 'react'\nimport Utils from '@utils'\nimport './index.less'\nimport common from '@constant/common'\nimport { Button } from 'antd'\nimport * as nipplejs from 'nipplejs'\nconst { keyCode } = common\n\nenum Direction {\n  Up = 0,\n  Down = 1,\n  Left = 2,\n  Right = 3\n}\n\ninterface IProps {\n  w: number\n  h: number,\n  isMobile: boolean\n}\n\ninterface IState {\n  isGameOver: boolean,\n  hint: string\n}\n\nconst { Up, Down, Left, Right } = Direction\nconst reverseDirection = {\n  [Up]: Down,\n  [Down]: Up,\n  [Left]: Right,\n  [Right]: Left\n}\nconst backgroundColor = '#dcdcdc'\nconst initSnake = () => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst initSpeed = 200\nconst getFruit = (snake, max) => {\n  const f = Utils.random(0, max - 1)\n  return snake.includes(f) ? getFruit(snake, max) : f\n}\n\nclass Snake extends React.Component<IProps, IState> {\n  canvas\n  ctx\n  remote\n  size = this.props.isMobile ? 20 : 20\n  rowCount = ~~(this.props.w / this.size)\n  colCount = ~~(this.props.h / this.size)\n  max = this.rowCount * this.colCount\n  direction = Right\n  snake = initSnake()\n  interval\n  friut = getFruit(this.snake, this.max)\n  speed = initSpeed\n  count = 0\n  state = {\n    isGameOver: false,\n    hint: ''\n  }\n\n  componentWillMount () {\n    document.addEventListener('keydown', this.keydown)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.keydown)\n  }\n\n  keydown = e => {\n    switch (e.keyCode) {\n      case keyCode.up:\n        this.go(Up)\n        break\n      case keyCode.down:\n        this.go(Down)\n        break\n      case keyCode.left:\n        this.go(Left)\n        break\n      case keyCode.right:\n        this.go(Right)\n        break\n    }\n  }\n\n  componentDidMount () {\n    this.ctx = this.canvas.getContext('2d')\n    this.init()\n    const joystick = nipplejs.create({\n      zone: this.remote,\n      color: '#777'\n    })\n    joystick.on('dir:up', () => this.go(Up))\n    joystick.on('dir:down', () => this.go(Down))\n    joystick.on('dir:left', () => this.go(Left))\n    joystick.on('dir:right', () => this.go(Right))\n  }\n\n  go = direction => {\n    if (this.state.isGameOver) return\n    if (this.direction !== reverseDirection[direction]) this.direction = direction\n    this.init()\n  }\n\n  init = () => {\n    clearInterval(this.interval)\n    this.doCycle()\n    this.interval = setInterval(this.doCycle, this.speed)\n  }\n\n  reset = () => {\n    this.setState({\n      isGameOver: false\n    }, () => {\n      this.clearReact()\n      this.snake = initSnake()\n      this.direction = Right\n      this.speed = initSpeed\n      this.init()\n    })\n  }\n\n  doCycle = () => {\n    this.resetSnake()\n    this.drawSnake()\n  }\n\n  clearReact = () => {\n    const { w, h } = this.props\n    this.ctx.clearRect(0, 0, w, h)\n  }\n\n  resetSnake = () => {\n    this.clearReact()\n    const last = this.snake[this.snake.length - 1]\n    const next = this.getHead(last)\n\n    // 是否吃到果子\n    if (last === this.friut) {\n      this.friut = getFruit(this.snake, this.max)\n      // 每吃7个果实 加速\n      if (this.count === 7) {\n        this.speed *= .8\n        this.count = 0\n        this.init()\n        return\n      } else {\n        this.count++\n      }\n    } else {\n      this.snake.shift()\n    }\n\n    if (this.snake.includes(next)) {\n      // game over\n      clearInterval(this.interval)\n      this.setState({\n        hint: 'Game Over',\n        isGameOver: true\n      })\n    } else if (this.snake.length === this.max) {\n      // you win\n      clearInterval(this.interval)\n      this.setState({\n        hint: 'You Win!!!',\n        isGameOver: true\n      })\n    } else {\n      this.snake.push(next)\n    }\n  }\n\n  drawFriut = () => {\n    this.draw(this.friut, 'blue')\n  }\n\n  getHead = v => {\n    const { rowCount, colCount, max, direction } = this\n    let next\n    let isTouchBorder\n    switch (direction) {\n      case Left:\n        next = v - 1\n        isTouchBorder = ~~(next / rowCount) !== ~~(v / rowCount)\n        return isTouchBorder || v <= 0 ? v + rowCount - 1 : next\n      case Right:\n        next = v + 1\n        isTouchBorder = ~~(next / rowCount) !== ~~(v / rowCount)\n        return isTouchBorder ? v - rowCount + 1 : next\n      case Up:\n        next = v - rowCount\n        isTouchBorder = next < 0\n        return isTouchBorder ? max + v % rowCount : next\n      case Down:\n        next = v + rowCount\n        isTouchBorder = ~~(next / rowCount) > colCount\n        return isTouchBorder ? v % rowCount : next\n    }\n  }\n\n  drawSnake = () => {\n    this.drawFriut()\n    const { length } = this.snake\n    this.snake.forEach((v, i) => this.draw(v, i !== length - 1 ? '#666' : '#333'))\n  }\n\n  draw = (i, c) => {\n    this.ctx.fillStyle = c\n    this.ctx.fillRect(i % this.rowCount * this.size + 1, ~~(i / this.rowCount) * this.size + 1, this.size - 1, this.size - 1)\n  }\n\n  render () {\n    const { w, h } = this.props\n    const { isGameOver, hint } = this.state\n    return (\n      <div className='snake-wrapper'>\n        <canvas ref={el => this.canvas = el} width={w} height={h} style={{ backgroundColor }} />\n        <div className='remote-area' ref={el => this.remote = el}/>\n        { isGameOver ? (\n          <div className='over'>\n            <div className='hint'>{ hint }</div>\n            <Button type='primary' onClick={this.reset}>Reset</Button>\n          </div>\n        ) : ''}\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Snake,\n  mapStateToProps: state => ({\n    w: state.common.contentWidth,\n    h: state.common.contentHeight,\n    isMobile: state.common.isMobile\n  })\n})\n"],"sourceRoot":""}