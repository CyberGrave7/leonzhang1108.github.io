{"version":3,"sources":["webpack:///./src/pages/InfiniteList/index.tsx"],"names":["props","randomBoolean","Math","random","calculateOffset","index","list","length","offsetTop","height","setState","doCalculate","startIndex","offset","innerOffset","endIndex","findEndIndex","visibleData","slice","top","findTopByIndex","state","findStartIndex","visibleHeight","wrapper","clientHeight","calculateEndIndex","scrollHandler","e","interval","target","scrollTop","val","obj","push","contentHeight","reduce","p","c","componentDidMount","this","render","className","onScroll","ref","style","transform","map","item","i","lineHeight","key","Component"],"mappings":"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","file":"js/24.0972851d6f0486d27114.bundle.js","sourcesContent":["\nimport React from 'react'\nimport './index.less'\n\ninterface IState {\n  list: any[],\n  // 可视区域top\n  top: number,\n  // 数据总高度\n  contentHeight: number,\n  // 可见高度\n  visibleHeight: number,\n  // 可见列表\n  visibleData: any[],\n  // 上下预加载个数\n  offset: number,\n  // 间隔\n  interval: number\n}\n\nclass InfiniteList extends React.Component<{}, IState> {\n\n  wrapper\n\n  randomBoolean = () => Math.random() - 0.5 > 0\n\n  constructor (props) {\n    super(props)\n    // init data\n    const list: any[] = []\n\n    for (let val = 0; val < 777; val++) {\n      // randam height\n      const height = this.randomBoolean() ? 60 : 30\n\n      const obj: any = { val, height }\n\n      if (!val) {\n        obj.offsetTop = height\n      }\n\n      list.push(obj)\n    }\n\n    const contentHeight = list.reduce((p, c) => p + c.height, 0)\n\n    this.state = {\n      // 可视区域top\n      top: 0,\n      // 可见高度\n      visibleHeight: 0,\n      // 可见列表\n      visibleData: [],\n      // 上下预加载个数\n      offset: 10,\n      // 间隔\n      interval: 2,\n      // 总列表，及offsetTop\n      list,\n      // 数据总高度\n      contentHeight\n    }\n  }\n\n  componentDidMount () {\n    // init height & visible data\n    const visibleHeight = this.wrapper.clientHeight\n\n    this.setState({\n      visibleHeight,\n      ...this.doCalculate(0)\n    })\n  }\n\n  calculateOffset = index => {\n    const { list } = this.state\n\n    if (index === list.length) { return }\n\n    // 取缓存\n    if (list[index].offsetTop) { return list[index].offsetTop }\n\n    let offsetTop = list[index].height\n\n    offsetTop += this.calculateOffset(index - 1)\n\n    // 添加缓存\n    list[index] = {\n      ...list[index],\n      offsetTop\n    }\n\n    this.setState({ list })\n\n    return offsetTop\n  }\n\n  doCalculate = startIndex => {\n    const { list, offset } = this.state\n\n    const innerOffset = startIndex = startIndex - offset\n\n    startIndex = startIndex > 0 ? startIndex : 0\n\n    let endIndex = this.findEndIndex(startIndex) + offset * 2 + 1\n\n    endIndex = innerOffset < 0 ? endIndex + innerOffset : endIndex\n\n    endIndex = endIndex > list.length ? list.length : endIndex\n\n    const visibleData = list.slice(startIndex, endIndex)\n\n    const top = this.findTopByIndex(startIndex)\n\n    return { visibleData, top }\n  }\n\n  findTopByIndex = index => index ? this.state.list[index - 1].offsetTop : 0\n\n  findStartIndex = top => {\n    const { list } = this.state\n\n    let index = 0\n\n    while (index < list.length) {\n      if (!list[index].offsetTop) { this.calculateOffset(index) }\n\n      if (top < list[index].offsetTop) { break }\n\n      index++\n    }\n\n    return index\n  }\n\n  findEndIndex = startIndex => {\n    let { visibleHeight } = this.state\n    const { list } = this.state\n\n    // 取缓存\n    if (list[startIndex].endIndex) { return list[startIndex].endIndex }\n\n    visibleHeight = visibleHeight || this.wrapper.clientHeight\n\n    // 计算endIndex\n    const endIndex = this.calculateEndIndex(visibleHeight, startIndex)\n\n    // 加入缓存\n    list[startIndex].endIndex = endIndex\n\n    this.setState({ list })\n\n    return endIndex\n  }\n\n  calculateEndIndex = (visibleHeight, index = 0) => {\n    const { list } = this.state\n\n    while (visibleHeight > 0) {\n      const i = index + 1\n      if (i !== list.length) {\n        visibleHeight -= list[++index].height\n      } else {\n        break\n      }\n    }\n\n    return index\n  }\n\n  scrollHandler = e => {\n    const { interval } = this.state\n\n    const startIndex = this.findStartIndex(e.target.scrollTop)\n\n    if (startIndex % interval === 0) { this.setState(this.doCalculate(startIndex)) }\n  }\n\n  render () {\n    const { visibleData, contentHeight, top } = this.state\n\n    return (\n      <div className='infinite-list-wrapper' onScroll={this.scrollHandler} ref={ref => { this.wrapper = ref }}>\n        <div className='infinite-list-ghost' style={{ height: contentHeight }} />\n        <div className='infinite-list' style={{ transform: `translate3d(0, ${top}px, 0)` }}>\n          { visibleData.map((item, i) => {\n            const style = { height: `${ item.height }px`, lineHeight: `${ item.height }px` }\n            return <div className='item' key={i} style={style}>{`item-${item.val}`}</div>\n          }) }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InfiniteList\n"],"sourceRoot":""}