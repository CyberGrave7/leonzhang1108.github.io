{"version":3,"sources":["webpack:///./src/pages/Tetris/constant.tsx","webpack:///./src/pages/Tetris/tools.tsx","webpack:///./node_modules/css-animation/lib/Event.js","webpack:///./src/pages/Tetris/index.tsx"],"names":["keyCode","left","up","right","down","space","block","L","J","O","T","Z","S","I","scores","couldMoveLeftOrRight","width","rx","y","playboard","length","blockList","couldMove","forEach","row","dy","every","item","dx","push","x","nx","ox","ny","oy","couldMoveFun","_","bottomBlockList","i","l","next","b","getCurrPosition","cBlock","screen","rotate","moveTo","clone","blockMap","max","center","Math","floor","index","cm","curr","Object","defineProperty","exports","value","START_EVENT_NAME_MAP","transitionstart","transition","WebkitTransition","MozTransition","OTransition","msTransition","animationstart","animation","WebkitAnimation","MozAnimation","OAnimation","msAnimation","END_EVENT_NAME_MAP","transitionend","animationend","startEvents","endEvents","addEventListener","node","eventName","eventListener","removeEventListener","window","document","style","createElement","process","EVENT_NAME_MAP","events","baseEventName","hasOwnProperty","baseEvents","styleName","detectEvents","TransitionEvents","addStartEventListener","startEvent","setTimeout","removeStartEventListener","addEndEventListener","endEvent","removeEndEventListener","module","blocks","keys","props","transform","clearBtnInterval","btnInterval","clearInterval","interval","resetGame","e","calculateScreen","column","state","getSize","random","intervalTime","score","pause","gameover","touchDown","pressed","setState","doMovePlayboard","h","visibilitychange","visibilityState","togglePause","isGameOver","clearRow","map","clearedList","splice","unshift","Array","fill","keyup","keydown","code","doMove","touchStart","cx","lx","lp","rp","my","newInterval","dp","reset","r","goToBottom","movePlayboard","doTimeout","setInterval","p","couldGoDown","isRowNeedClear","couldCalculate","vibrate","c","result","j","renderPlayboard","className","key","cName","isMobile","scale","paddingTop","s","getDirectionBtn","direction","onTouchStart","handle","componentWillUnmount","this","componentWillReceiveProps","nextProps","render","btnStyle","type","onClick","Component","connect","component","Tetris","mapStateToProps","common","contentHeight"],"mappings":"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","file":"js/16.a84ed75856a86c8774b7.bundle.js","sourcesContent":["export default {\n  keyCode: {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    space: 32\n  },\n  block: {\n    L: [\n      [\n        [0, 0, 1],\n        [1, 1, 1]\n      ], [\n        [1, 1],\n        [0, 1],\n        [0, 1]\n      ], [\n        [1, 1, 1],\n        [1, 0, 0]\n      ], [\n        [1, 0],\n        [1, 0],\n        [1, 1]\n      ]\n    ],\n    J: [\n      [\n        [1, 0, 0],\n        [1, 1, 1]\n      ], [\n        [1, 1],\n        [1, 0],\n        [1, 0]\n      ], [\n        [1, 1, 1],\n        [0, 0, 1]\n      ], [\n        [0, 1],\n        [0, 1],\n        [1, 1]\n      ]\n    ],\n    O: [\n      [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ], [\n        [1, 1],\n        [1, 1]\n      ]\n    ],\n    T: [\n      [\n        [0, 1, 0],\n        [1, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [0, 1]\n      ], [\n        [1, 1, 1],\n        [0, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    Z: [\n      [\n        [1, 1, 0],\n        [0, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ], [\n        [1, 1, 0],\n        [0, 1, 1]\n      ], [\n        [0, 1],\n        [1, 1],\n        [1, 0]\n      ]\n    ],\n    S: [\n      [\n        [0, 1, 1],\n        [1, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ], [\n        [0, 1, 1],\n        [1, 1, 0]\n      ], [\n        [1, 0],\n        [1, 1],\n        [0, 1]\n      ]\n    ],\n    I: [\n      [\n        [1, 1, 1, 1]\n      ], [\n        [1], [1], [1], [1]\n      ], [\n        [1, 1, 1, 1]\n      ], [\n        [1], [1], [1], [1]\n      ]\n    ]\n  },\n  scores: [1, 3, 5, 10]\n}\n","import Utils from '@utils'\nimport Constant from './constant'\nconst { block: blockMap, keyCode } = Constant\n\nconst couldMoveLeftOrRight = ({ width, block, rx, y, playboard, length }) => {\n  const blockList: any[] = []\n  let couldMove = true\n  block.forEach((row, dy) => {\n    row.every((item, dx) => {\n      if (item) {\n        blockList.push({ x: dx, y: dy })\n      }\n      return true\n    })\n  })\n  blockList.every(item => {\n    const { x: ox, y: oy } = item\n    const nx = ox + rx\n    const ny = y + oy - length\n    if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n      couldMove = false\n    }\n    return couldMove\n  })\n  return couldMove\n}\n\nconst couldMoveFun = {\n  [keyCode.up]: ({ width, block, rx, y, playboard, length }) => {\n    let couldMove = true\n    block.every((row, dy) => {\n      row.every((_, dx) => {\n        const nx = dx + rx\n        const ny = y + dy - length\n        if (ny >= 0 && ny < 20 && playboard[ny][nx]) { couldMove = false }\n        return couldMove\n      })\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.down]: ({ width, block, rx, y, playboard, length }) => {\n    if (y === 21) { return false }\n    let couldMove = true\n    const bottomBlockList: any[] = []\n    for (let i = 0; i < width; i++) {\n      let l = block.length - 1\n      let next = true\n      while (l >= 0 && next) {\n        if (block[l][i]) {\n          bottomBlockList.push({ x: i, y: l })\n          next = false\n        }\n        l--\n      }\n    }\n    bottomBlockList.every(b => {\n      const { x: ox, y: oy } = b\n      const nx = ox + rx\n      const ny = y + oy - length\n      if (ny >= 0 && ny < 20 && playboard[ny][nx]) {\n        couldMove = false\n      }\n      return couldMove\n    })\n    return couldMove\n  },\n  [keyCode.left]: couldMoveLeftOrRight,\n  [keyCode.right]: couldMoveLeftOrRight\n}\n\nexport default {\n  getCurrPosition: ({ x, y, cBlock, screen, rotate, moveTo }) => {\n    const playboard = Utils.clone(screen)\n    const block: number[][] = blockMap[cBlock][rotate]\n    const width = block[0].length\n    const min = 0\n    const max = 10 - width\n    const center = Math.floor((10 - width) / 2)\n    let length = block.length\n    let index = y\n    let rx = center + x\n    if (rx < min) {\n      rx = min\n      x = -center\n    }\n    if (rx > max) {\n      rx = max\n      x = width % 2 === 1 ? center + 1 : center\n    }\n    const cm = couldMoveFun[moveTo]({ width, block, rx, y, playboard, length })\n\n    if (cm) {\n      while (index > 0 && length > 0) {\n        let curr = --index\n        const row = block[length - 1]\n        curr = curr > 20 ? 20 : curr\n        for (let i = 0; i < 10; i++) {\n          if (i < row.length) {\n            const b = playboard[curr][rx + i]\n            if (!b) {\n              playboard[curr][rx + i] = row[i]\n            }\n          }\n        }\n        length--\n      }\n    }\n\n    return { playboard, x, screen, couldMove: cm }\n  }\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar START_EVENT_NAME_MAP = {\n  transitionstart: {\n    transition: 'transitionstart',\n    WebkitTransition: 'webkitTransitionStart',\n    MozTransition: 'mozTransitionStart',\n    OTransition: 'oTransitionStart',\n    msTransition: 'MSTransitionStart'\n  },\n\n  animationstart: {\n    animation: 'animationstart',\n    WebkitAnimation: 'webkitAnimationStart',\n    MozAnimation: 'mozAnimationStart',\n    OAnimation: 'oAnimationStart',\n    msAnimation: 'MSAnimationStart'\n  }\n};\n\nvar END_EVENT_NAME_MAP = {\n  transitionend: {\n    transition: 'transitionend',\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'mozTransitionEnd',\n    OTransition: 'oTransitionEnd',\n    msTransition: 'MSTransitionEnd'\n  },\n\n  animationend: {\n    animation: 'animationend',\n    WebkitAnimation: 'webkitAnimationEnd',\n    MozAnimation: 'mozAnimationEnd',\n    OAnimation: 'oAnimationEnd',\n    msAnimation: 'MSAnimationEnd'\n  }\n};\n\nvar startEvents = [];\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  if (!('AnimationEvent' in window)) {\n    delete START_EVENT_NAME_MAP.animationstart.animation;\n    delete END_EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete START_EVENT_NAME_MAP.transitionstart.transition;\n    delete END_EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  function process(EVENT_NAME_MAP, events) {\n    for (var baseEventName in EVENT_NAME_MAP) {\n      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {\n        var baseEvents = EVENT_NAME_MAP[baseEventName];\n        for (var styleName in baseEvents) {\n          if (styleName in style) {\n            events.push(baseEvents[styleName]);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  process(START_EVENT_NAME_MAP, startEvents);\n  process(END_EVENT_NAME_MAP, endEvents);\n}\n\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n  detectEvents();\n}\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar TransitionEvents = {\n  // Start events\n  startEvents: startEvents,\n\n  addStartEventListener: function addStartEventListener(node, eventListener) {\n    if (startEvents.length === 0) {\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    startEvents.forEach(function (startEvent) {\n      addEventListener(node, startEvent, eventListener);\n    });\n  },\n  removeStartEventListener: function removeStartEventListener(node, eventListener) {\n    if (startEvents.length === 0) {\n      return;\n    }\n    startEvents.forEach(function (startEvent) {\n      removeEventListener(node, startEvent, eventListener);\n    });\n  },\n\n\n  // End events\n  endEvents: endEvents,\n\n  addEndEventListener: function addEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n  removeEndEventListener: function removeEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nexports['default'] = TransitionEvents;\nmodule.exports = exports['default'];","import Utils from '@utils'\nimport { Button } from 'antd'\nimport React from 'react'\nimport Constant from './constant'\nimport './index.less'\nimport Tools from './tools'\nconst { block: blockMap, keyCode, scores } = Constant\n\nconst blocks = Object.keys(blockMap)\n\ninterface IStates {\n  row: number,\n  column: number,\n  screen: number[][],\n  playboard: number[][],\n  cBlock: string,\n  interval?: number,\n  y: number,\n  x: number,\n  h: number,\n  rotate: number,\n  intervalTime: number,\n  couldMove: boolean,\n  pause: boolean,\n  gameover: boolean,\n  touchDown: boolean,\n  score: number,\n  pressed: boolean,\n  style: any,\n}\n\ninterface IProps {\n  isMobile: boolean,\n  h: number\n}\n\nclass Tetris extends React.Component<IProps, IStates> {\n\n  interval\n\n  btnInterval\n\n  transform = Utils.transform\n\n  constructor (props) {\n    super(props)\n    document.addEventListener('keyup', this.keyup)\n    document.addEventListener('keydown', this.keydown)\n    document.addEventListener('touchend', this.clearBtnInterval)\n    document.addEventListener('visibilitychange', this.visibilitychange)\n    this.resetGame()\n  }\n\n  componentWillUnmount () {\n    this.clearInterval()\n    this.clearBtnInterval()\n    document.removeEventListener('keyup', this.keyup)\n    document.removeEventListener('keydown', this.keydown)\n    document.removeEventListener('touchend', this.clearBtnInterval)\n    document.removeEventListener('visibilitychange', this.visibilitychange)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this.setState({ style: this.getSize(nextProps) })\n  }\n\n  clearBtnInterval = () => {\n    if (this.btnInterval) { clearInterval(this.btnInterval) }\n  }\n\n  clearInterval = () => {\n    if (this.interval) { clearInterval(this.interval) }\n  }\n\n  resetGame = (e?) => {\n    this.clearInterval()\n    const row = 20\n    const column = 10\n    const screen = this.calculateScreen({ row, column })\n    const state = {\n      row, column, screen,\n      playboard: screen,\n      style: this.getSize(this.props),\n      cBlock: blocks[Utils.random(0, blocks.length)],\n      x: 0, y: 0, intervalTime: 800, score: 0, rotate: Utils.random(0, 4),\n      pause: false, gameover: false, touchDown: false, pressed: false\n    }\n    if (e) {\n      this.setState(state, () => this.doMovePlayboard(true))\n    } else {\n      this.state = { ...state, couldMove: false, h: 0 }\n      setTimeout(() => this.doMovePlayboard(true), 0)\n    }\n  }\n\n  visibilitychange = () => {\n    if ((!this.state.pause && document.visibilityState === 'hidden')\n        || (this.state.pause && document.visibilityState !== 'hidden')) {\n      this.togglePause()\n    }\n  }\n\n  isGameOver = () => {\n    const { x, y, cBlock, screen, rotate } = this.state\n    const { couldMove } = Tools.getCurrPosition({ x, y: y + 1, cBlock, screen, rotate, moveTo: keyCode.down })\n    return !(couldMove || blockMap[cBlock][rotate].length < y - 1)\n  }\n\n  clearRow = playboard => {\n    const screen = Utils.clone(playboard).map(row => row.map(item => item ? 2 : 0))\n    const clearedList: number[] = []\n    playboard.forEach((row, i) => {\n      if (row.every(item => item)) {\n        screen.splice(i, 1)\n        screen.unshift(new Array(10).fill(0))\n        clearedList.push(i)\n      }\n    })\n    return { screen, clearedList }\n  }\n\n  keyup = () => {\n    this.clearBtnInterval()\n    this.setState({ pressed: false })\n  }\n\n  keydown = e => {\n    if (!this.state.pressed) {\n      const { keyCode: code } = e\n      if (code === keyCode.space) {\n        this.doMove(code)\n      } else {\n        this.touchStart(code)\n      }\n    }\n  }\n\n  doMove = code => {\n    const { x: cx, y: my, screen, cBlock, row, rotate, pause, gameover } = this.state\n    if (pause || gameover) { return }\n    let playboard = [[]]\n    let x = cx\n    switch (code) {\n      case keyCode.left:\n        x = cx - 1\n        const {\n          playboard: lp,\n          x: lx,\n          couldMove: lc\n        } = Tools.getCurrPosition({ x, y: my ? my : 20, cBlock, screen, rotate, moveTo: keyCode.left })\n        if (lc) {\n          x = lx\n          playboard = lp\n          this.setState({ playboard, x, pressed: true })\n        }\n        return\n      case keyCode.right:\n        x = cx + 1\n        const {\n          playboard: rp,\n          x: rx,\n          couldMove: rc\n        } = Tools.getCurrPosition({ x, y: my ? my : 20, cBlock, screen, rotate, moveTo: keyCode.right })\n        if (rc) {\n          x = rx\n          playboard = rp\n          this.setState({ playboard, x, pressed: true })\n        }\n        return\n      case keyCode.down:\n        if (my > row) { return }\n        const {\n          couldMove,\n          playboard: dp\n        } = Tools.getCurrPosition({ x, y: my + 1, cBlock, screen, rotate, moveTo: keyCode.down })\n        if (couldMove) {\n          this.newInterval()\n          this.setState({ playboard: dp, y: my + 1, pressed: true })\n        } else {\n          this.reset()\n        }\n        return\n      case keyCode.up:\n        let r = rotate\n        r = r >= 3 ? 0 : r + 1\n        const {\n          playboard: up,\n          couldMove: uc\n        } = Tools.getCurrPosition({ x: cx, y: my ? my : 20, cBlock, screen, rotate: r, moveTo: keyCode.up })\n        if (uc) {\n          playboard = up\n          this.setState({ playboard, rotate: r, pressed: true })\n        }\n        return\n      case keyCode.space:\n        this.goToBottom()\n        break\n      default:\n\n    }\n  }\n\n  newInterval = (next?) => {\n    this.clearInterval()\n    if (this.isGameOver()) {\n      this.setState({ gameover: true })\n    } else {\n      this.doMovePlayboard(next)\n    }\n  }\n\n  doMovePlayboard = (next?) => {\n    if (next) { this.movePlayboard(this.state) }\n    this.doTimeout()\n  }\n\n  doTimeout = () => {\n    this.interval = setInterval(() => {\n      this.movePlayboard(this.state)\n    }, this.state.intervalTime)\n  }\n\n  movePlayboard = ({ x, y }) => {\n    const { screen, cBlock, rotate } = this.state\n    const { playboard, couldMove } = Tools.getCurrPosition({ x, y: y + 1, cBlock, screen, rotate, moveTo: keyCode.down })\n    if (couldMove) {\n      this.setState({ playboard, y: y + 1 })\n    } else {\n      this.reset()\n    }\n  }\n\n  goToBottom = () => {\n    const { x, cBlock, rotate, screen, gameover, pause } = this.state\n    if (gameover || pause) { return }\n    let { y, playboard: p } = this.state\n    let couldGoDown = true\n    while (couldGoDown) {\n      const { couldMove, playboard } = Tools.getCurrPosition({ x, y: y + 1, cBlock, screen, rotate, moveTo: keyCode.down })\n      couldGoDown = couldMove\n      if (couldMove) {\n        y++\n        p = playboard\n      } else {\n        this.setState({ playboard: p, y, touchDown: true, pressed: true }, this.isRowNeedClear)\n      }\n    }\n    setTimeout(() => this.setState({ touchDown: false }), 100)\n  }\n\n  isRowNeedClear = (couldCalculate?) => {\n    this.clearInterval()\n    const { playboard, score } = this.state\n    const { screen, clearedList } = this.clearRow(playboard)\n    const { length } = clearedList\n    if (length) {\n      const state = couldCalculate ? { screen, score: score + scores[length - 1] } : { screen, score }\n      clearedList.forEach(index => playboard[index] = new Array(10).fill(3))\n      this.setState({ screen: playboard })\n      this.vibrate(100)\n      setTimeout(() => { this.setState(state, () => this.newInterval(true)) }, 300)\n    } else {\n      this.setState({ screen }, () => this.newInterval(true))\n    }\n  }\n\n  reset = () => {\n    this.vibrate(100)\n    this.setState({\n      cBlock: blocks[Utils.random(0, blocks.length)],\n      y: 0, x: 0, rotate: Utils.random(0, 4)\n    }, () => this.isRowNeedClear(true))\n  }\n\n  // state\n  // 0: empty, 1: block 2: full 3: cleared\n  calculateScreen = ({ row: r, column: c }) => {\n    const result: number[][] = []\n    for (let i = 0; i < r; i++) {\n      const row: number[] = []\n      for (let j = 0; j < c; j++) { row.push(0) }\n      result.push(row)\n    }\n    return result\n  }\n\n  renderPlayboard = () => this.state.playboard ? this.state.playboard.map((r, i) => (\n    <div className='row' key={i}>\n      { r.map((c, j) => {\n        let cName = ''\n        switch (c) {\n          case 1:\n            cName = 'block'\n            break\n          case 2:\n            cName = 'full'\n            break\n          case 3:\n            cName = 'cleared'\n            break\n        }\n        return <div key={j} className={`item ${cName}`}/>\n      }) }\n    </div>\n  )) : null\n\n  togglePause = () => {\n    const { pause } = this.state\n    if (!pause && this.interval) {\n      this.clearInterval()\n      this.clearBtnInterval()\n    } else {\n      this.newInterval()\n    }\n    this.setState({ pause: !pause })\n  }\n\n  touchStart = code => {\n    this.clearBtnInterval()\n    const interval = code === keyCode.down ? 50 : 100\n    this.doMove(code)\n    if (code !== keyCode.up) {\n      this.btnInterval = setInterval(() => this.doMove(code), interval)\n    }\n  }\n\n  getSize = props => {\n    if (!this.props.isMobile) { return {} }\n    const { h } = props\n    const scale = h / 960\n    const filling = h - 480\n    return {\n      paddingTop: (filling - 100) * .6,\n      [this.transform]: `scale(${scale + .3})`\n    }\n  }\n\n  vibrate = s => false && this.props.isMobile && navigator.vibrate ? navigator.vibrate(s) : null\n\n  getDirectionBtn = direction =>\n    <div onTouchStart={Utils.handle(direction === 'up' ? this.doMove : this.touchStart, keyCode[direction])} className={`anticon anticon-ts-app icon-${direction}-circle`}/>\n\n  render () {\n    const { isMobile } = this.props\n    const { pause, gameover, touchDown, score, style } = this.state\n    const btnStyle = { [this.transform]: style[this.transform] }\n    return (\n      <div className={`tetris-wrapper ${isMobile ? 'mobile' : ''}`}>\n        <div className='tetris-screen-wrapper' style={style}>\n          <div className='score'>{score}</div>\n          <div className={`tetris-screen ${touchDown ? 'touch-buttom' : ''}`}>\n            { this.renderPlayboard() }\n            {\n              gameover ? (\n                <div className='game-over'>\n                  <Button type='primary' onClick={this.resetGame}>Reset</Button>\n                </div>\n              ) : null\n            }\n          </div>\n        </div>\n        <div className='btn-wrapper'>\n          <div className='functional-btn' style={btnStyle}>\n            <div onTouchStart={this.togglePause} className={`anticon anticon-ts-app icon-${pause ? 'play' : 'pause'}`}/>\n            <div onTouchStart={this.goToBottom} className={`anticon anticon-ts-app icon-down`}/>\n          </div>\n          <div className='direction' style={btnStyle}>\n            { this.getDirectionBtn('up') }\n            <div className='middle'>\n              { this.getDirectionBtn('left') }\n              { this.getDirectionBtn('right') }\n            </div>\n            { this.getDirectionBtn('down') }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Tetris,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile,\n    h: state.common.contentHeight\n  })\n})\n"],"sourceRoot":""}