{"version":3,"sources":["webpack:///./node_modules/css-animation/lib/Event.js","webpack:///./node_modules/dom-to-image/src/dom-to-image.js","webpack:///./src/pages/MondrianArt/index.tsx"],"names":["Object","defineProperty","exports","value","START_EVENT_NAME_MAP","transitionstart","transition","WebkitTransition","MozTransition","OTransition","msTransition","animationstart","animation","WebkitAnimation","MozAnimation","OAnimation","msAnimation","END_EVENT_NAME_MAP","transitionend","animationend","startEvents","endEvents","addEventListener","node","eventName","eventListener","removeEventListener","window","document","style","createElement","process","EVENT_NAME_MAP","events","baseEventName","hasOwnProperty","baseEvents","styleName","push","detectEvents","TransitionEvents","addStartEventListener","length","forEach","startEvent","setTimeout","removeStartEventListener","addEndEventListener","endEvent","removeEndEventListener","module","global","util","escape","string","replace","parseExtension","mimeType","url","extension","toLowerCase","WOFF","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","svg","dataAsUrl","content","type","isDataUrl","search","canvasToBlob","canvas","toBlob","Promise","resolve","binaryString","atob","toDataURL","split","binaryArray","Uint8Array","i","charCodeAt","Blob","resolveUrl","baseUrl","doc","implementation","createHTMLDocument","base","head","appendChild","a","body","href","getAndEncode","TIMEOUT","domtoimage","impl","options","cacheBust","test","Date","getTime","placeholder","request","XMLHttpRequest","onreadystatechange","readyState","status","fail","encoder","FileReader","onloadend","result","readAsDataURL","response","ontimeout","responseType","timeout","open","send","imagePlaceholder","message","console","error","uid","index","Math","random","pow","toString","slice","delay","ms","arg","asArray","arrayLike","array","escapeXhtml","makeImage","uri","reject","image","Image","onload","onerror","src","width","leftBorder","px","rightBorder","scrollWidth","height","topBorder","bottomBorder","scrollHeight","match","exec","styleProperty","getComputedStyle","getPropertyValue","parseFloat","newUtil","inliner","URL_REGEX","inlineAll","get","shouldProcess","then","readUrls","urls","done","inline","filter","data","dataUrl","RegExp","urlAsRegex","newInliner","fontFaces","resolveAll","readAll","webFonts","all","map","webFont","cssStrings","join","styleSheets","cssRules","sheet","bind","e","log","rule","CSSRule","FONT_FACE_RULE","rules","newWebFont","webFontRule","parentStyleSheet","cssText","newFontFaces","images","Element","background","inlined","setProperty","getPropertyPriority","inlineBackground","HTMLImageElement","newImage","childNodes","child","element","newImages","defaultOptions","undefined","toSvg","toPng","draw","toJpeg","quality","toPixelData","getContext","getImageData","copyOptions","root","HTMLCanvasElement","cloneNode","clone","original","children","parent","childClone","cloneChildrenInOrder","cloneChildren","source","target","name","copyProperties","className","styleElement","selector","formatCssText","formatCssProperties","createTextNode","formatPseudoElementStyle","clonePseudoElement","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","SVGElement","SVGRectElement","attribute","getAttribute","processClone","embedFonts","inlineImages","bgcolor","backgroundColor","keys","property","XMLSerializer","serializeToString","xhtml","foreignObject","makeSvgDataUri","domNode","ctx","fillStyle","fillRect","newCanvas","drawImage","makeNodeCopy","copyStyle","cloneStyle","clonePseudoElements","formatProperty","copyUserInput","fixSvg","styleNode","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","dom_to_image__WEBPACK_IMPORTED_MODULE_2__","dom_to_image__WEBPACK_IMPORTED_MODULE_2___default","n","antd_lib_button__WEBPACK_IMPORTED_MODULE_3__","antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default","useState","useRef","colorMap","getBoundary","v","res","connect","component","_a","isMobile","h","w","btn","art","_b","blocksKey","setBlocksKey","ref","key","Array","from","animationDelay","gridColumn","gridRow","generateBlocks","icon","onClick","current","base64","downloadImg","mapStateToProps","state","common","contentHeight","contentWidth"],"mappings":"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","file":"js/16.532d206565be1fe7d7cf.bundle.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar START_EVENT_NAME_MAP = {\n  transitionstart: {\n    transition: 'transitionstart',\n    WebkitTransition: 'webkitTransitionStart',\n    MozTransition: 'mozTransitionStart',\n    OTransition: 'oTransitionStart',\n    msTransition: 'MSTransitionStart'\n  },\n\n  animationstart: {\n    animation: 'animationstart',\n    WebkitAnimation: 'webkitAnimationStart',\n    MozAnimation: 'mozAnimationStart',\n    OAnimation: 'oAnimationStart',\n    msAnimation: 'MSAnimationStart'\n  }\n};\n\nvar END_EVENT_NAME_MAP = {\n  transitionend: {\n    transition: 'transitionend',\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'mozTransitionEnd',\n    OTransition: 'oTransitionEnd',\n    msTransition: 'MSTransitionEnd'\n  },\n\n  animationend: {\n    animation: 'animationend',\n    WebkitAnimation: 'webkitAnimationEnd',\n    MozAnimation: 'mozAnimationEnd',\n    OAnimation: 'oAnimationEnd',\n    msAnimation: 'MSAnimationEnd'\n  }\n};\n\nvar startEvents = [];\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  if (!('AnimationEvent' in window)) {\n    delete START_EVENT_NAME_MAP.animationstart.animation;\n    delete END_EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete START_EVENT_NAME_MAP.transitionstart.transition;\n    delete END_EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  function process(EVENT_NAME_MAP, events) {\n    for (var baseEventName in EVENT_NAME_MAP) {\n      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {\n        var baseEvents = EVENT_NAME_MAP[baseEventName];\n        for (var styleName in baseEvents) {\n          if (styleName in style) {\n            events.push(baseEvents[styleName]);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  process(START_EVENT_NAME_MAP, startEvents);\n  process(END_EVENT_NAME_MAP, endEvents);\n}\n\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n  detectEvents();\n}\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar TransitionEvents = {\n  // Start events\n  startEvents: startEvents,\n\n  addStartEventListener: function addStartEventListener(node, eventListener) {\n    if (startEvents.length === 0) {\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    startEvents.forEach(function (startEvent) {\n      addEventListener(node, startEvent, eventListener);\n    });\n  },\n  removeStartEventListener: function removeStartEventListener(node, eventListener) {\n    if (startEvents.length === 0) {\n      return;\n    }\n    startEvents.forEach(function (startEvent) {\n      removeEventListener(node, startEvent, eventListener);\n    });\n  },\n\n\n  // End events\n  endEvents: endEvents,\n\n  addEndEventListener: function addEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n  removeEndEventListener: function removeEndEventListener(node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function (endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nexports['default'] = TransitionEvents;\nmodule.exports = exports['default'];","(function (global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof module !== 'undefined')\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n                defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n            .then(function (node) {\n                return cloneNode(node, options.filter, true);\n            })\n            .then(embedFonts)\n            .then(inlineImages)\n            .then(applyOptions)\n            .then(function (clone) {\n                return makeSvgDataUri(clone,\n                    options.width || util.width(node),\n                    options.height || util.height(node)\n                );\n            });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function (property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.getContext('2d').getImageData(\n                    0,\n                    0,\n                    util.width(node),\n                    util.height(node)\n                ).data;\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.toDataURL();\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n            .then(function (canvas) {\n                return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n            .then(util.canvasToBlob);\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if(typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if(typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n            .then(util.makeImage)\n            .then(util.delay(100))\n            .then(function (image) {\n                var canvas = newCanvas(domNode);\n                canvas.getContext('2d').drawImage(image, 0, 0);\n                return canvas;\n            });\n\n        function newCanvas(domNode) {\n            var canvas = document.createElement('canvas');\n            canvas.width = options.width || util.width(domNode);\n            canvas.height = options.height || util.height(domNode);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n            .then(makeNodeCopy)\n            .then(function (clone) {\n                return cloneChildren(node, clone, filter);\n            })\n            .then(function (clone) {\n                return processClone(node, clone);\n            });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function (child) {\n                    done = done\n                        .then(function () {\n                            return cloneNode(child, filter);\n                        })\n                        .then(function (childClone) {\n                            if (childClone) parent.appendChild(childClone);\n                        });\n                });\n                return done;\n            }\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n                .then(cloneStyle)\n                .then(clonePseudoElements)\n                .then(copyUserInput)\n                .then(fixSvg)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                function copyStyle(source, target) {\n                    if (source.cssText) target.cssText = source.cssText;\n                    else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function (name) {\n                            target.setProperty(\n                                name,\n                                source.getPropertyValue(name),\n                                source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function (element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    clone.className = clone.className + ' ' + className;\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                                .map(formatProperty)\n                                .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                    style.getPropertyValue(name) +\n                                    (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function (attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n            .then(function (cssText) {\n                var styleNode = document.createElement('style');\n                node.appendChild(styleNode);\n                styleNode.appendChild(document.createTextNode(cssText));\n                return node;\n            });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n            .then(function () {\n                return node;\n            });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n            .then(function (node) {\n                node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n                return new XMLSerializer().serializeToString(node);\n            })\n            .then(util.escapeXhtml)\n            .then(function (xhtml) {\n                return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n            })\n            .then(function (foreignObject) {\n                return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n                    foreignObject + '</svg>';\n            })\n            .then(function (svg) {\n                return 'data:image/svg+xml;charset=utf-8,' + svg;\n            });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function (resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function (resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function () {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if(domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function (resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if(domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if(split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if(placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function () {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if(placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function delay(ms) {\n            return function (arg) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function (url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n                .then(function (url) {\n                    return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n                })\n                .then(get || util.getAndEncode)\n                .then(function (data) {\n                    return util.dataAsUrl(data, util.mimeType(url));\n                })\n                .then(function (dataUrl) {\n                    return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n                });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n                .then(readUrls)\n                .then(function (urls) {\n                    var done = Promise.resolve(string);\n                    urls.forEach(function (url) {\n                        done = done.then(function (string) {\n                            return inline(string, url, baseUrl, get);\n                        });\n                    });\n                    return done;\n                });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n                .then(function (webFonts) {\n                    return Promise.all(\n                        webFonts.map(function (webFont) {\n                            return webFont.resolve();\n                        })\n                    );\n                })\n                .then(function (cssStrings) {\n                    return cssStrings.join('\\n');\n                });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n                .then(getCssRules)\n                .then(selectWebFontRules)\n                .then(function (rules) {\n                    return rules.map(newWebFont);\n                });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                    .filter(function (rule) {\n                        return rule.type === CSSRule.FONT_FACE_RULE;\n                    })\n                    .filter(function (rule) {\n                        return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                    });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function (sheet) {\n                    try {\n                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                    } catch (e) {\n                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function () {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                    .then(get || util.getAndEncode)\n                    .then(function (data) {\n                        return util.dataAsUrl(data, util.mimeType(element.src));\n                    })\n                    .then(function (dataUrl) {\n                        return new Promise(function (resolve, reject) {\n                            element.onload = resolve;\n                            element.onerror = reject;\n                            element.src = dataUrl;\n                        });\n                    });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n                .then(function () {\n                    if (node instanceof HTMLImageElement)\n                        return newImage(node).inline();\n                    else\n                        return Promise.all(\n                            util.asArray(node.childNodes).map(function (child) {\n                                return inlineAll(child);\n                            })\n                        );\n                });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                    .then(function (inlined) {\n                        node.style.setProperty(\n                            'background',\n                            inlined,\n                            node.style.getPropertyPriority('background')\n                        );\n                    })\n                    .then(function () {\n                        return node;\n                    });\n            }\n        }\n    }\n})(this);\n","import * as React from 'react'\nimport Utils from '@utils'\nimport domtoimage from 'dom-to-image'\nimport { Button } from 'antd'\nimport './index.less'\n\nconst { useState, useRef } = React\n\nconst colorMap = [\n  'rgb(248, 217, 45)',\n  'rgb(248, 217, 45)',\n  'rgb(242, 245, 241)',\n  'rgb(11, 84, 164)',\n  'rgb(214, 0, 20)',\n  'rgb(11, 84, 164)'\n]\n\nconst generateBlocks = isMobile =>\n  Array.from(Array(isMobile ? 20 : 50).keys()).map(i => (\n    <div\n      key={i}\n      className={`block-${i}`}\n      style={{\n        animationDelay: `${i * 0.05}s`,\n        gridColumn: `span ${Utils.random(1, isMobile ? 4 : 5)}`,\n        gridRow: `span ${Utils.random(1, isMobile ? 4 : 5)}`,\n        backgroundColor: colorMap[Utils.random(0, 5)]\n      }}\n    />\n  ))\n\nconst getBoundary = v => {\n  let res = 10\n  while (v - res > 120) {\n    res += 60\n  }\n  return res\n}\n\nconst MondrianArt = ({ isMobile, h, w }) => {\n\n  const height = isMobile ? 430 : getBoundary(h)\n  const width = isMobile ? 250 : getBoundary(w)\n  const btn = isMobile ? 'mobile' : 'pc'\n\n  const art = useRef(null)\n  const [blocksKey, setBlocksKey] = useState(1)\n\n  const refresh = () => {\n    setBlocksKey(blocksKey ? 0 : 1)\n  }\n\n  const toPicture = () => {\n    domtoimage.toPng(art.current).then(base64 => {\n      Utils.downloadImg(base64, 'MondrianArt')\n    })\n  }\n\n  return (\n    <div className='mondrian-wrapper'>\n      <div className='mondrian-inner-wrapper' ref={art}>\n        <div\n          key={blocksKey}\n          className='mondrian-art'\n          style={{ height, width }}\n        >\n          { generateBlocks(isMobile) }\n        </div>\n      </div>\n      <Button\n        className={`download-btn ${btn}`}\n        icon='download'\n        type='primary'\n        onClick={toPicture}\n      />\n      <Button\n        className={`refresh-btn ${btn}`}\n        icon='redo'\n        type='primary'\n        onClick={refresh}\n      />\n    </div>\n  )\n}\n\nexport default Utils.connect({\n  component: MondrianArt,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile,\n    h: state.common.contentHeight,\n    w: state.common.contentWidth\n  })\n})\n"],"sourceRoot":""}