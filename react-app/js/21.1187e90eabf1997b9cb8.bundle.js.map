{"version":3,"sources":["webpack:///./src/pages/Camera/index.tsx"],"names":["w","window","tracking","navigator","props","frame","userMedia","mediaDevices","startDrawing","getUserMedia","video","audio","then","stream","doDrawing","apply","catch","error","setState","hasCamera","console","log","tracker","ObjectTracker","setInitialScale","setStepSize","setEdgesDensity","task","track","camera","on","event","data","forEach","rect","x","y","width","height","run","state","index","random","componentWillUnmount","this","stop","componentDidMount","render","className","style","transform","id","ref","el","v","autoPlay","Component"],"mappings":"ieAOMA,EAAIC,OAEJC,GADOC,UACIH,EAAEE,UAWnB,cAME,WAAaE,GAAb,MACE,YAAMA,IAAM,K,OAHd,EAAAC,MAAQ,CAAC,SAAU,aAAc,UAAW,SAAU,MAAO,aAc7D,EAAAC,UAAY,WAAM,OAAAH,UAAUI,cAAgB,MAE5C,EAAAC,aAAe,WACT,EAAKF,YACPH,UAAUI,aAAaE,aAAa,CAClCC,OAAO,EACPC,OAAO,IACNC,KAAK,SAAAC,GACN,EAAKC,UAAUC,MAAM,KACpBC,MAAM,SAAAC,GACP,EAAKC,SAAS,CAAEC,WAAW,IAC3BC,QAAQC,IAAIJ,KAGd,EAAKC,SAAS,CAAEC,WAAW,KAI/B,EAAAL,UAAY,WACF,IACFQ,EAAU,IAAIC,EADZ,EAAAA,eAC0B,QAClCD,EAAQE,gBAAgB,GACxBF,EAAQG,YAAY,GACpBH,EAAQI,gBAAgB,IACxB,EAAKC,KAAOzB,EAAS0B,MAAM,SAAUN,EAAS,CAAEO,QAAQ,IACxDP,EAAQQ,GAAG,QAAS,SAAAC,GAClBA,EAAMC,KAAKC,QAAQ,SAAAC,GACT,IAAAC,EAAA,EAAAA,EAAGC,EAAA,EAAAA,EAAGC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,OACrB,EAAKpB,SAAS,CAAEiB,EAAC,EAAEC,EAAC,EAAEC,MAAK,EAAEC,OAAM,QAGvC,EAAKX,KAAKY,OAzCV,EAAKC,MAAQ,CACXrB,WAAW,EACXgB,EAAG,EACHC,EAAG,EACHE,OAAQ,IACRD,MAAO,IACPI,MAAO,IAAMC,OAAO,EAAG,I,EAwE7B,OAtFqB,OAoDnB,YAAAC,qBAAA,WACMC,KAAKjB,MAAQiB,KAAKjB,KAAKkB,MACzBD,KAAKjB,KAAKkB,QAId,YAAAC,kBAAA,WACEF,KAAKpC,gBAGP,YAAAuC,OAAA,sBACQ,aAAE5B,EAAA,EAAAA,UAAWgB,EAAA,EAAAA,EAAGC,EAAA,EAAAA,EAAGE,EAAA,EAAAA,OAAQD,EAAA,EAAAA,MAAOI,EAAA,EAAAA,MAExC,OAAOtB,EAEH,yBAAK6B,UAAU,QACb,yBAAKA,UAAU,gBAAgBC,MAAO,CAAEC,UAAW,gBAAgBf,EAAC,OAAOC,EAAC,WAC1E,yBAAKY,UAAW,SAASJ,KAAKvC,MAAMoC,GAAUQ,MAAO,CAAEX,OAAWA,EAAM,KAAMD,MAAUA,EAAK,OAC3F,yBAAKW,UAAU,oBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,kBAGnB,2BAAOG,GAAG,QAAQH,UAAU,QAAQX,MAAM,OAAOC,OAAO,OAAOc,IAAK,SAAAC,GAAM,SAAKC,EAAID,GAAIE,UAAU,KAGnG,yBAAKP,UAAU,SAAQ,6CAG/B,EAtFA,CAAqB,IAAMQ,WAwFZ","file":"js/21.1187e90eabf1997b9cb8.bundle.js","sourcesContent":["\nimport Utils from '@utils'\nimport React from 'react'\nimport 'tracking'\nimport 'tracking/build/data/face-min.js'\nimport './index.less'\n\nconst w = window as any\nconst navi = navigator as any\nconst tracking = w.tracking\n\ninterface IState {\n  hasCamera: boolean,\n  x: number,\n  y: number,\n  height: number,\n  width: number,\n  index: number\n}\n\nclass Camera extends React.Component<null, IState> {\n  v\n  task\n\n  frame = ['threat', 'big threat', 'machine', 'analog', 'gov', 'president']\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      hasCamera: true,\n      x: 0,\n      y: 0,\n      height: 150,\n      width: 150,\n      index: Utils.random(0, 5)\n    }\n  }\n\n  userMedia = () => navigator.mediaDevices || null\n\n  startDrawing = () => {\n    if (this.userMedia()) {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false\n      }).then(stream => {\n        this.doDrawing.apply(this)\n      }).catch(error => {\n        this.setState({ hasCamera: false })\n        console.log(error)\n      })\n    } else {\n      this.setState({ hasCamera: false })\n    }\n  }\n\n  doDrawing = () => {\n    const { ObjectTracker } = tracking\n    const tracker = new ObjectTracker('face')\n    tracker.setInitialScale(4)\n    tracker.setStepSize(1)\n    tracker.setEdgesDensity(0.1)\n    this.task = tracking.track('#video', tracker, { camera: true })\n    tracker.on('track', event => {\n      event.data.forEach(rect => {\n        const { x, y, width, height } = rect\n        this.setState({ x, y, width, height })\n      })\n    })\n    this.task.run()\n  }\n\n  componentWillUnmount () {\n    if (this.task && this.task.stop) {\n      this.task.stop()\n    }\n  }\n\n  componentDidMount () {\n    this.startDrawing()\n  }\n\n  render () {\n    const { hasCamera, x, y, height, width, index } = this.state\n\n    return hasCamera\n      ? (\n        <div className='home'>\n          <div className='frame-wrapper' style={{ transform: `translate3d( ${x}px, ${y}px, 0)` }}>\n            <div className={`frame ${this.frame[index]}`} style={{ height: `${height}px`, width: `${width}px` }}>\n              <div className='top-left corner'/>\n              <div className='top-right corner'/>\n              <div className='bottom-right corner'/>\n              <div className='bottom-left corner'/>\n              <div className='top line'/>\n              <div className='left line'/>\n              <div className='right line'/>\n              <div className='bottom line'/>\n            </div>\n          </div>\n          <video id='video' className='video' width='100%' height='100%' ref={el => this.v = el} autoPlay={true}/>\n        </div>\n      ) : (\n        <div className='empty'><span>no camera</span></div>\n      )\n  }\n}\n\nexport default Camera\n"],"sourceRoot":""}