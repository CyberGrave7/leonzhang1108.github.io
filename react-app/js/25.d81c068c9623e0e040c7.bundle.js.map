{"version":3,"sources":["webpack:///./src/pages/MondrianArt/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","dom_to_image__WEBPACK_IMPORTED_MODULE_2__","dom_to_image__WEBPACK_IMPORTED_MODULE_2___default","n","antd_lib_button__WEBPACK_IMPORTED_MODULE_3__","antd_lib_button__WEBPACK_IMPORTED_MODULE_3___default","useState","useRef","colorMap","getBoundary","v","res","connect","component","_a","isMobile","h","w","height","width","btn","art","_b","blocksKey","setBlocksKey","className","ref","key","style","Array","from","keys","map","i","animationDelay","gridColumn","random","gridRow","backgroundColor","generateBlocks","a","icon","type","onClick","toPng","current","then","base64","downloadImg","mapStateToProps","state","common","contentHeight","contentWidth"],"mappings":"mHAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAAO,EAAAC,GAMQE,GANRV,EAAA,KAAAA,EAAA,KAMQG,EAAA,UAAUQ,EAAAR,EAAA,OAEZS,EAAW,CACf,oBACA,oBACA,qBACA,mBACA,kBACA,oBAiBIC,EAAc,SAAAC,GAElB,IADA,IAAIC,EAAM,GACHD,EAAIC,EAAM,KACfA,GAAO,GAET,OAAOA,GAiDMb,EAAA,QAAAE,EAAA,EAAMY,QAAQ,CAC3BC,UA/CkB,SAACC,OAAEC,EAAAD,EAAAC,SAAUC,EAAAF,EAAAE,EAAGC,EAAAH,EAAAG,EAE5BC,EAASH,EAAW,IAAMN,EAAYO,GACtCG,EAAQJ,EAAW,IAAMN,EAAYQ,GACrCG,EAAML,EAAW,SAAW,KAE5BM,EAAMd,EAAO,MACbe,EAAAhB,EAAA,GAACiB,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GAYlB,OACEvB,EAAA,qBAAK0B,UAAU,oBACb1B,EAAA,qBAAK0B,UAAU,yBAAyBC,IAAKL,GAC3CtB,EAAA,qBACE4B,IAAKJ,EACLE,UAAU,eACVG,MAAO,CAAEV,OAAMA,EAAEC,MAAKA,IA/CT,SAAAJ,GACrB,OAAAc,MAAMC,KAAKD,MAAMd,EAAW,GAAK,IAAIgB,QAAQC,IAAI,SAAAC,GAAK,OACpDlC,EAAA,qBACE4B,IAAKM,EACLR,UAAW,SAASQ,EACpBL,MAAO,CACLM,eAAuB,IAAJD,EAAQ,IAC3BE,WAAY,QAAQnC,EAAA,EAAMoC,OAAO,EAAGrB,EAAW,EAAI,GACnDsB,QAAS,QAAQrC,EAAA,EAAMoC,OAAO,EAAGrB,EAAW,EAAI,GAChDuB,gBAAiB9B,EAASR,EAAA,EAAMoC,OAAO,EAAG,SAwCtCG,CAAexB,KAGrBhB,EAAA,cAACM,EAAAmC,EAAM,CACLf,UAAW,gBAAgBL,EAC3BqB,KAAK,WACLC,KAAK,UACLC,QArBY,WAChBzC,EAAAsC,EAAWI,MAAMvB,EAAIwB,SAASC,KAAK,SAAAC,GACjC/C,EAAA,EAAMgD,YAAYD,EAAQ,oBAqB1BhD,EAAA,cAACM,EAAAmC,EAAM,CACLf,UAAW,eAAeL,EAC1BqB,KAAK,OACLC,KAAK,UACLC,QA/BU,WACdnB,EAAaD,EAAY,EAAI,QAsC/B0B,gBAAiB,SAAAC,GAAS,OACxBnC,SAAUmC,EAAMC,OAAOpC,SACvBC,EAAGkC,EAAMC,OAAOC,cAChBnC,EAAGiC,EAAMC,OAAOE","file":"js/25.d81c068c9623e0e040c7.bundle.js","sourcesContent":["import * as React from 'react'\nimport Utils from '@utils'\nimport domtoimage from 'dom-to-image'\nimport { Button } from 'antd'\nimport './index.less'\n\nconst { useState, useRef } = React\n\nconst colorMap = [\n  'rgb(248, 217, 45)',\n  'rgb(248, 217, 45)',\n  'rgb(242, 245, 241)',\n  'rgb(11, 84, 164)',\n  'rgb(214, 0, 20)',\n  'rgb(11, 84, 164)'\n]\n\nconst generateBlocks = isMobile =>\n  Array.from(Array(isMobile ? 20 : 50).keys()).map(i => (\n    <div\n      key={i}\n      className={`block-${i}`}\n      style={{\n        animationDelay: `${i * 0.05}s`,\n        gridColumn: `span ${Utils.random(1, isMobile ? 4 : 5)}`,\n        gridRow: `span ${Utils.random(1, isMobile ? 4 : 5)}`,\n        backgroundColor: colorMap[Utils.random(0, 5)]\n      }}\n    />\n  ))\n\nconst getBoundary = v => {\n  let res = 10\n  while (v - res > 120) {\n    res += 60\n  }\n  return res\n}\n\nconst MondrianArt = ({ isMobile, h, w }) => {\n\n  const height = isMobile ? 430 : getBoundary(h)\n  const width = isMobile ? 250 : getBoundary(w)\n  const btn = isMobile ? 'mobile' : 'pc'\n\n  const art = useRef(null)\n  const [blocksKey, setBlocksKey] = useState(1)\n\n  const refresh = () => {\n    setBlocksKey(blocksKey ? 0 : 1)\n  }\n\n  const toPicture = () => {\n    domtoimage.toPng(art.current).then(base64 => {\n      Utils.downloadImg(base64, 'MondrianArt')\n    })\n  }\n\n  return (\n    <div className='mondrian-wrapper'>\n      <div className='mondrian-inner-wrapper' ref={art}>\n        <div\n          key={blocksKey}\n          className='mondrian-art'\n          style={{ height, width }}\n        >\n          { generateBlocks(isMobile) }\n        </div>\n      </div>\n      <Button\n        className={`download-btn ${btn}`}\n        icon='download'\n        type='primary'\n        onClick={toPicture}\n      />\n      <Button\n        className={`refresh-btn ${btn}`}\n        icon='redo'\n        type='primary'\n        onClick={refresh}\n      />\n    </div>\n  )\n}\n\nexport default Utils.connect({\n  component: MondrianArt,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile,\n    h: state.common.contentHeight,\n    w: state.common.contentWidth\n  })\n})\n"],"sourceRoot":""}