{"version":3,"sources":["webpack:///./src/pages/InfiniteList/index.tsx"],"names":["randomBoolean","Math","random","initState","setState","list","top","contentHeight","visibleHeight","visibleData","offset","interval","calculateOffset","index","length","offsetTop","height","doCalculate","startIndex","innerOffset","endIndex","findEndIndex","slice","findTopByIndex","state","findStartIndex","wrapper","clientHeight","calculateEndIndex","scrollHandler","e","target","scrollTop","componentWillMount","this","val","obj","push","reduce","p","c","componentDidMount","render","className","onScroll","ref","style","transform","map","item","i","lineHeight","key","Component"],"mappings":"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","file":"js/23.a4c721c2915af59f028a.bundle.js","sourcesContent":["\nimport React from 'react'\nimport './index.less'\n\ninterface IState {\n  list: any[],\n  // 可视区域top\n  top: number,\n  // 数据总高度\n  contentHeight: number,\n  // 可见高度\n  visibleHeight: number,\n  // 可见列表\n  visibleData: any[],\n  // 上下预加载个数\n  offset: number,\n  // 间隔\n  interval: number\n}\n\nclass InfiniteList extends React.Component<{}, IState> {\n\n  wrapper\n\n  randomBoolean = () => Math.random() - 0.5 > 0\n\n  componentWillMount () {\n    this.initState()\n    // init data\n    const list: any[] = []\n\n    for (let val = 0; val < 777; val++) {\n      // randam height\n      const height = this.randomBoolean() ? 60 : 30\n\n      const obj: any = { val, height }\n\n      if (!val) {\n        obj.offsetTop = height\n      }\n\n      list.push(obj)\n    }\n\n    const contentHeight = list.reduce((p, c) => p + c.height, 0)\n\n    this.setState({ list, contentHeight })\n  }\n\n  initState = () => {\n    this.setState({\n      // 总列表，及offsetTop\n      list: [],\n      // 可视区域top\n      top: 0,\n      // 数据总高度\n      contentHeight: 0,\n      // 可见高度\n      visibleHeight: 0,\n      // 可见列表\n      visibleData: [],\n      // 上下预加载个数\n      offset: 10,\n      // 间隔\n      interval: 2\n    })\n  }\n\n  componentDidMount () {\n    // init height & visible data\n    const visibleHeight = this.wrapper.clientHeight\n\n    this.setState({\n      visibleHeight,\n      ...this.doCalculate(0)\n    })\n  }\n\n  calculateOffset = index => {\n    const { list } = this.state\n\n    if (index === list.length) { return }\n\n    // 取缓存\n    if (list[index].offsetTop) { return list[index].offsetTop }\n\n    let offsetTop = list[index].height\n\n    offsetTop += this.calculateOffset(index - 1)\n\n    // 添加缓存\n    list[index] = {\n      ...list[index],\n      offsetTop\n    }\n\n    this.setState({ list })\n\n    return offsetTop\n  }\n\n  doCalculate = startIndex => {\n    const { list, offset } = this.state\n\n    const innerOffset = startIndex = startIndex - offset\n\n    startIndex = startIndex > 0 ? startIndex : 0\n\n    let endIndex = this.findEndIndex(startIndex) + offset * 2 + 1\n\n    endIndex = innerOffset < 0 ? endIndex + innerOffset : endIndex\n\n    endIndex = endIndex > list.length ? list.length : endIndex\n\n    const visibleData = list.slice(startIndex, endIndex)\n\n    const top = this.findTopByIndex(startIndex)\n\n    return { visibleData, top }\n  }\n\n  findTopByIndex = index => index ? this.state.list[index - 1].offsetTop : 0\n\n  findStartIndex = top => {\n    const { list } = this.state\n\n    let index = 0\n\n    while (index < list.length) {\n      if (!list[index].offsetTop) { this.calculateOffset(index) }\n\n      if (top < list[index].offsetTop) { break }\n\n      index++\n    }\n\n    return index\n  }\n\n  findEndIndex = startIndex => {\n    let { visibleHeight } = this.state\n    const { list } = this.state\n\n    // 取缓存\n    if (list[startIndex].endIndex) { return list[startIndex].endIndex }\n\n    visibleHeight = visibleHeight || this.wrapper.clientHeight\n\n    // 计算endIndex\n    const endIndex = this.calculateEndIndex(visibleHeight, startIndex)\n\n    // 加入缓存\n    list[startIndex].endIndex = endIndex\n\n    this.setState({ list })\n\n    return endIndex\n  }\n\n  calculateEndIndex = (visibleHeight, index = 0) => {\n    const { list } = this.state\n\n    while (visibleHeight > 0) {\n      const i = index + 1\n      if (i !== list.length) {\n        visibleHeight -= list[++index].height\n      } else {\n        break\n      }\n    }\n\n    return index\n  }\n\n  scrollHandler = e => {\n    const { interval } = this.state\n\n    const startIndex = this.findStartIndex(e.target.scrollTop)\n\n    if (startIndex % interval === 0) { this.setState(this.doCalculate(startIndex)) }\n  }\n\n  render () {\n    const { visibleData, contentHeight, top } = this.state\n\n    return (\n      <div className='infinite-list-wrapper' onScroll={this.scrollHandler} ref={ref => { this.wrapper = ref }}>\n        <div className='infinite-list-ghost' style={{ height: contentHeight }} />\n        <div className='infinite-list' style={{ transform: `translate3d(0, ${top}px, 0)` }}>\n          { visibleData.map((item, i) => {\n            const style = { height: `${ item.height }px`, lineHeight: `${ item.height }px` }\n            return <div className='item' key={i} style={style}>{`item-${item.val}`}</div>\n          }) }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InfiniteList\n"],"sourceRoot":""}