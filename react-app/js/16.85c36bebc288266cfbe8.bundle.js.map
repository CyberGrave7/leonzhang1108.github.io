{"version":3,"sources":["webpack:///./src/pages/Reversi/tools.tsx","webpack:///./src/pages/Reversi/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","directionMap","statusMap","check","_a","x","y","checkerboard","player","direction","dx","dy","result","click","couldClick","some","clickToCover","reverse","forEach","cx","cy","push","c","empty","black","white","blackHover","whiteHover","Reversi","_super","_this","apply","this","arguments","reset","initCheckerboard","size","setState","history","step","flatten","length","arr","reduce","a","b","concat","Array","isArray","_b","state","_tools__WEBPACK_IMPORTED_MODULE_7__","itemMouseEnter","rowIndex","itemIndex","itemMouseLeave","itemClick","_c","curr","pass","retract","pop","black_1","white_1","renderItem","item","status","className","react__WEBPACK_IMPORTED_MODULE_5__","key","onClick","_utils__WEBPACK_IMPORTED_MODULE_0__","handle","onMouseOver","onMouseLeave","join","renderRow","row","map","getScore","isWin","content","title","antd_lib_modal__WEBPACK_IMPORTED_MODULE_3___default","info","__extends","prototype","componentWillMount","render","isMobile","props","disablePass","Object","keys","antd_lib_button__WEBPACK_IMPORTED_MODULE_1___default","type","disabled","connect","component","mapStateToProps","common"],"mappings":"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","file":"js/16.85c36bebc288266cfbe8.bundle.js","sourcesContent":["const directionMap = [\n  [0, 1], [0, -1],\n  [-1, 0], [1, 0],\n  [-1, -1], [-1, 1],\n  [1, -1], [1, 1]\n]\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2\n}\n\nconst borderMax = 7\n\ninterface IReverse {\n  x: number,\n  y: number\n}\n\nconst check = ({ x, y, checkerboard, player, direction }) => {\n  const [ dx, dy ] = direction\n  let result = 0\n  let click = player ? statusMap.black : statusMap.white\n  x += dx\n  y += dy\n  while (x >= 0 && x <= borderMax && y >= 0 && y <= borderMax) {\n    if (checkerboard[x][y] === statusMap.empty || result === 2) { break }\n    if (checkerboard[x][y] === click) {\n      result++\n      click = !player ? statusMap.black : statusMap.white\n    } else {\n      if (result !== 1) { break }\n    }\n    x += dx\n    y += dy\n  }\n  return result === 2\n}\n\nexport default {\n  couldClick: ({ x, y, checkerboard, player }) =>\n    directionMap.some(direction => check({ x, y, checkerboard, player, direction })),\n\n  clickToCover: ({ x, y, checkerboard, player }) => {\n    const reverse: IReverse[] = []\n    directionMap.forEach(direction => {\n      const [dx, dy] = direction\n      let cx = x\n      let cy = y\n      cx += dx\n      cy += dy\n      if (check({ x, y, checkerboard, player, direction })) {\n        while (cx >= 0 && cx <= borderMax && cy >= 0 && cy <= borderMax) {\n          if (checkerboard[cx][cy] === statusMap.empty\n            || checkerboard[cx][cy] === (player ? statusMap.white : statusMap.black)) {\n            break\n          }\n          checkerboard[cx][cy] = player ? statusMap.white : statusMap.black\n          reverse.push({ x: cx, y: cy })\n          cx += dx\n          cy += dy\n        }\n      }\n    })\n    return { c: checkerboard, r: reverse }\n  }\n}\n","import Utils from '@utils'\nimport { Button, Modal } from 'antd'\nimport * as React from 'react'\nimport './index.less'\nimport Tools from './tools'\n\ninterface IProps {\n  isMobile: boolean\n}\n\ninterface IState {\n  checkerboard: any[][],\n  step: number,\n  history: any[],\n  size: number\n}\n\nconst statusMap = {\n  empty: 0,\n  black: 1,\n  white: 2,\n  blackHover: 3,\n  whiteHover: 4\n}\n\nclass Reversi extends React.Component<IProps, IState> {\n  componentWillMount () {\n    this.reset()\n  }\n\n  reset = () => {\n    const { checkerboard, size } = this.initCheckerboard()\n    this.setState({\n      checkerboard,\n      history: [],\n      step: 0,\n      size\n    })\n  }\n\n  initCheckerboard = () => {\n    const checkerboard = [\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 2, 1, 0, 0, 0],\n      [0, 0, 0, 1, 2, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n    return {\n      checkerboard,\n      size: this.flatten(checkerboard).length\n    }\n  }\n\n  flatten = arr => arr.reduce((a, b) => a.concat(Array.isArray(b) ? this.flatten(b) : b), [])\n\n  couldClick = ({ x, y }) => {\n    const { checkerboard, step } = this.state\n    return Tools.couldClick({ x, y, checkerboard, player: step % 2 })\n  }\n\n  itemMouseEnter = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step } = this.state\n    const { blackHover, whiteHover } = statusMap\n    if (checkerboard[x][y] === statusMap.empty && this.couldClick({ x, y })) {\n      checkerboard[x][y] = step % 2 === 0 ? blackHover : whiteHover\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemMouseLeave = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard } = this.state\n    if (checkerboard[x][y] === statusMap.blackHover\n      || checkerboard[x][y] === statusMap.whiteHover) {\n      checkerboard[x][y] = statusMap.empty\n      this.setState({ checkerboard })\n    }\n  }\n\n  itemClick = ({ rowIndex: x, itemIndex: y }) => {\n    const { checkerboard, step, history } = this.state\n    const { black, white } = statusMap\n    if (checkerboard[x][y] !== black && checkerboard[x][y] !== white && this.couldClick({ x, y })) {\n      checkerboard[x][y] = step % 2 === 0 ? black : white\n      const { c, r } = Tools.clickToCover({ x, y, checkerboard, player: step % 2 })\n      history.push({ curr: { x, y }, reverse: r })\n      this.setState({\n        checkerboard: c,\n        step: history.length,\n        history\n      })\n    }\n  }\n\n  pass = () => {\n    const { history } = this.state\n    history.push({})\n    this.setState({\n      step: history.length,\n      history\n    })\n  }\n\n  retract = () => {\n    const { history, checkerboard } = this.state\n    const { curr, reverse } = history.pop()\n    if (curr) {\n      const { x, y } = curr\n      const { empty, black, white } = statusMap\n      checkerboard[x][y] = empty\n      reverse.forEach(r => {\n        checkerboard[r.x][r.y] = checkerboard[r.x][r.y] === white ? black : white\n      })\n    }\n\n    this.setState({ history, step: history.length, checkerboard })\n  }\n\n  renderItem = (item, rowIndex, itemIndex) => {\n    const status = this.state.checkerboard[rowIndex][itemIndex]\n    const { black, white, blackHover, whiteHover } = statusMap\n    const className = status ? ['chosen'] : []\n    if (className.length) {\n      switch (status) {\n        case black:\n          className.push('black selected')\n          break\n        case white:\n          className.push('white selected')\n          break\n        case blackHover:\n          className.push('black')\n          break\n        case whiteHover:\n          className.push('white')\n          break\n      }\n    }\n    return (\n      <td className='item' key={itemIndex}\n        onClick={Utils.handle(this.itemClick, { rowIndex, itemIndex })}\n        onMouseOver={Utils.handle(this.itemMouseEnter, { rowIndex, itemIndex })}\n        onMouseLeave={Utils.handle(this.itemMouseLeave, { rowIndex, itemIndex })}\n      >\n        <div className={className.join(' ')} >\n          <div className='chess front'/>\n          <div className='chess back'/>\n        </div>\n      </td>\n    )\n  }\n\n  renderRow = (row, rowIndex) => (\n    <tr className='row' key={rowIndex}>\n      {row.map((item, itemIndex) => this.renderItem(item, rowIndex, itemIndex))}\n    </tr>\n  )\n\n  getScore = () => {\n    const { checkerboard } = this.state\n    let black = 0\n    let white = 0\n    checkerboard.forEach(row => row.forEach(item => {\n      if (item === statusMap.black) { black++ }\n      if (item === statusMap.white) { white++ }\n    }))\n    return { black, white }\n  }\n\n  isWin = ({ black, white, size }) => {\n    let title = ''\n    let content\n    if (black + white === size) {\n      if (black > white) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (black < white) {\n        title = 'Victory'\n        content = 'white wins'\n      } else {\n        title = 'Peace'\n        content = 'Draw'\n      }\n    } else if (!black || !white) {\n      if (black) {\n        title = 'Victory'\n        content = 'black wins'\n      } else if (white) {\n        title = 'Victory'\n        content = 'white wins'\n      }\n    }\n\n    if (title && content) { Modal.info({ title, content }) }\n  }\n\n  render () {\n    const { checkerboard, history, step, size } = this.state\n    const { isMobile } = this.props\n    const { black, white } = this.getScore()\n    const disablePass = black + white === size || (history.length && Object.keys(history[history.length - 1]).length === 0)\n    this.isWin({ black, white, size })\n    return (\n      <div className='reversi-wrapper'>\n        <div className='reversi-top'>\n          <div className={`top black ${isMobile ? '' : 'bigger'} ${step % 2 === 1 ? '' : 'current'}`}>{black}</div>\n          <div className={`top white ${isMobile ? '' : 'bigger'} ${step % 2 === 1 ? 'current' : ''}`}>{white}</div>\n        </div>\n        <div className={ isMobile ? 'checkerboard' : 'checkerboard bigger' }>\n          <table>\n            <tbody>\n              {checkerboard.map(this.renderRow)}\n            </tbody>\n          </table>\n        </div>\n        <div className='reversi-bottom'>\n          <Button type='primary' disabled={history.length === 0} onClick={this.reset}>\n            Reset\n          </Button>\n          <Button type='primary' disabled={disablePass ? true : false} onClick={this.pass}>\n            Pass\n          </Button>\n          <Button type='primary' disabled={history.length === 0} onClick={this.retract}>\n            Retract\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Utils.connect({\n  component: Reversi,\n  mapStateToProps: state => ({\n    isMobile: state.common.isMobile\n  })\n})\n"],"sourceRoot":""}